#################################################################
## NATURAL EVENTS VERTICAL STACK - PICTURE MENU
#################################################################
type: custom:vertical-stack-in-card
card_mod: ##background-color: var(--ha-card-background);
  style: |
    ha-card {
        --ha-card-background: var(--card-background);
        --primary-text-color: var(--primary-text-color);
        border: 
          1px solid {% if is_state('binary_sensor.global_natural_alert', 'on') %} 
          {{state_attr('binary_sensor.global_natural_alert','level')}} {% else %} Green {% endif %};
    }
cards:
  #################################################################
  ## * PICTURE ELEMENTS (Al posto dell'HEADER nella versione light) *
  #################################################################
  - type: picture-elements
    card_mod:
      style: |
        {% set global = 'binary_sensor.global_natural_alert' %}
        @keyframes blink {
          30% {
            background: {% if is_state(global, 'on') %} gray; {% endif %}
          }
        }
        ha-card {
          --my-animation: blink 2s linear 3;
          --global-level: {% if is_state(global, 'on') %} {{state_attr(global,'level')}}; {% else %} Green;{% endif %} 
          --meteoalarm-level: {{state_attr(global,'meteoalarm_level')}};
          --meteoalarm-level-left: {% if (state_attr('binary_sensor.meteoalarm', 'urgency')|lower) == 'immediate' %} 5%; {% else %} 90%; {% endif %}
          --meteoalarm-type-left: {% if (state_attr('binary_sensor.meteoalarm', 'urgency')|lower) == 'immediate' %} 10%; {% else %} 95%; {% endif %}
          --meteoalarmc: {% if 'today' in states('sensor.meteoalarm_custom') %} 10%; {% endif %}
          --meteoalarmc: {% if 'tomorrow' in states('sensor.meteoalarm_custom') %} 95%; {% endif %}
          --my-border-style: solid;

          --my-border-width: {% if is_state('input_boolean.natural_events', 'off') %} 1px; {% else %} 0px; {% endif %}
          --my-border-color: {% if is_state(global, 'on') %} var(--global-level); {% endif %}
          --my-background: {% if is_state(global, 'on') %} var(--global-level); {% else %} Green;{% endif %}
          --my-color: {% if state_attr(global, 'level') in ['White','Yellow','Orange'] %} var(--disabled-text-color); {% endif %}
          {% if is_state(global, 'on') %}
          --my-border-width: {% if is_state('input_boolean.natural_events', 'off') %} 1px; {% else %} 1px 0px 0px 0px; {% endif %}
          {% else %}
          --my-border-width: 0px;
          --my-color: Wihte;
          {% endif %}
          border-color: var(--my-border-color);
          border-style: var(--my-border-style);
          border-width: var(--my-border-width);
          background: var(--my-background);
        }
    image: /local/hassiohelp/pkg_natural_events/background.png
    elements:
      - type: conditional # Nessun Evento
        conditions:
          - entity: binary_sensor.global_natural_alert
            state: "off"
        elements:
          - type: state-label
            entity: sensor.dark_sky_summary
            tap_action:
              action: call-service
              service: input_boolean.toggle
              service_data:
                entity_id: input_boolean.natural_events
            hold_action:
              action: none
            style:
              border-color: "var(--global-level)"
              border-style: solid
              border-width: "var(--my-border-width)"
              animation: "var(--my-animation)"
              background-color: "var(--global-level)"
              color: "var(--my-color)"
              font-family: Trebuchet MS
              font-size: 120%
              font-weight: bold
              left: 0%
              opacity: 0.5
              pointer-events: auto
              right: 0%
              text-align: center
              top: 95%
              transform: "translate(0%,-50%)"
              z-index: 98

      - type: conditional # MeteoAlarm
        conditions:
          - entity: binary_sensor.meteoalarm
            state: "on"
        elements:
          - type: state-icon
            entity: sensor.meteoalarm_level
            style:
              "--paper-item-icon-color": "var(--meteoalarm-level)"
              left: "var(--meteoalarm-level-left)"
              top: 20%
              z-index: 99
          - type: state-icon
            entity: sensor.meteoalarm_type
            style:
              "--paper-item-icon-color": "var(--meteoalarm-level)"
              left: "var(--meteoalarm-type-left)"
              top: 20%
              z-index: 99

      - type: conditional # Eventi Meteo
        conditions:
          - entity: group.meteoalert
            state: "on"
        elements:
          - type: state-label
            entity: group.meteoalert
            prefix: "Meteo "
            tap_action:
              action: call-service
              service: input_boolean.toggle
              service_data:
                entity_id: input_boolean.natural_events
            hold_action:
              action: none
            style:
              border-color: "var(--global-level)"
              border-style: solid
              border-width: "var(--my-border-width)"
              animation: "var(--my-animation)"
              background-color: "var(--global-level)"
              color: "var(--my-color)"
              font-family: Trebuchet MS
              font-size: 120%
              font-weight: bold
              left: 0%
              opacity: 0.5
              pointer-events: auto
              right: 0%
              text-align: center
              top: 5%
              transform: "translate(0%,-50%)"
              z-index: 98
          - entity: binary_sensor.dpc_temporali_oggi
            image: /local/hassiohelp/pkg_natural_events/dpc_temporali_oggi.png
            state_filter:
              "on": opacity(1)
              "off": opacity(0)
            style:
              left: 50%
              pointer-events: none
              top: 50%
              width: 100%
              z-index: 1
            type: image
          - entity: binary_sensor.dpc_temporali_domani
            image: /local/hassiohelp/pkg_natural_events/dpc_temporali_domani.png
            state_filter:
              "on": opacity(1)
              "off": opacity(0)
            style:
              left: 50%
              pointer-events: none
              top: 50%
              width: 100%
              z-index: 1
            type: image
      - type: conditional # Eventi Geologici
        conditions:
          - entity: group.geoalert
            state: "on"
        elements:
          - type: state-label
            entity: group.geoalert
            prefix: "Geologico "
            tap_action:
              action: call-service
              service: input_boolean.toggle
              service_data:
                entity_id: input_boolean.natural_events
            hold_action:
              action: none
            style:
              border-color: "var(--global-level)"
              border-style: solid
              border-width: "var(--my-border-width)"
              animation: "var(--my-animation)"
              background-color: "var(--global-level)"
              color: "var(--my-color)"
              font-family: Trebuchet MS
              font-size: 120%
              font-weight: bold
              left: 0%
              opacity: 0.5
              pointer-events: auto
              right: 0%
              text-align: center
              top: 95%
              transform: "translate(0%,-50%)"
              z-index: 98
          - entity: binary_sensor.dpc_idraulico_oggi
            image: /local/hassiohelp/pkg_natural_events/dpc_idraulico_oggi.png
            state_filter:
              "on": opacity(1)
              "off": opacity(0)
            style:
              left: 50%
              pointer-events: none
              top: 50%
              width: 100%
              z-index: 2
            type: image
          - entity: binary_sensor.dpc_idrogeologico_oggi
            image: /local/hassiohelp/pkg_natural_events/dpc_idrogeologico_oggi.png
            state_filter:
              "on": opacity(1)
              "off": opacity(0)
            style:
              left: 50%
              pointer-events: none
              top: 50%
              width: 100%
              z-index: 1
            type: image
          - entity: binary_sensor.dpc_idraulico_domani
            image: /local/hassiohelp/pkg_natural_events/dpc_idraulico_domani.png
            state_filter:
              "on": opacity(1)
              "off": opacity(0)
            style:
              left: 50%
              pointer-events: none
              top: 50%
              width: 100%
              z-index: 2
            type: image
          - entity: binary_sensor.dpc_idrogeologico_domani
            image: /local/hassiohelp/pkg_natural_events/dpc_idrogeologico_domani.png
            state_filter:
              "on": opacity(1)
              "off": opacity(0)
            style:
              left: 50%
              pointer-events: none
              top: 50%
              width: 100%
              z-index: 1
            type: image
          - entity: binary_sensor.lastquake
            image: /local/hassiohelp/pkg_natural_events/sisma.png
            state_filter:
              "on": opacity(1)
              "off": opacity(0)
            style:
              left: 50%
              pointer-events: none
              top: 50%
              width: 100%
              z-index: 0
            type: image
  #################################################################
  ## FOLDS
  #################################################################
  - type: conditional # CARDS VISUALIZZATE SOLO SE INPUT BOOLEAN NATURAL EVENTS ON!!
    conditions:
      - entity: input_boolean.natural_events
        state: "on"
    card:
      type: vertical-stack
      cards:
        - type: entities # CONTENITORE MENU Impostazioni fold
          card_mod:
            style: |
              div#states.card-content {padding-block-end: 0; padding-block-start: 0;}
              ha-card {background:none; border-radius: 0px; box-shadow: none;}
          entities:
            - type: custom:auto-entities # MENU Impostazioni fold
              show_empty: false
              sort:
                method: domain
              filter:
                include:
                  - attributes:
                      package: "Natural_events*" # 🌍
                    options:
                      state_color: true
                exclude:
                  - entity_id: input_boolean.natural_events
                  - entity_id: geo_location.*
                  - domain: binary_sensor
                  - domain: group
                  - domain: sensor
                  - domain: script
                  - domain: zone
              card:
                type: custom:fold-entity-row
                head:
                  entity: input_boolean.natural_events
                  tap_action:
                    action: toggle
                  card_mod:
                    style: |
                      :host {
                        {% if is_state('input_boolean.natural_events', 'on') %} 
                        --paper-item-icon-color: var(--paper-item-icon-active-color);
                        {% endif %}
                      }
            - type: custom:fold-entity-row # 1 group.meteoalert
              card_mod:
                style: |
                  #head { 
                    {% if is_state('group.meteoalert', 'on') %}
                    --paper-item-icon-color: var(--paper-item-icon-active-color);
                    {% endif %}
                  }
              # padding: 0 #Allinea icone a sx
              head:
                entity: group.meteoalert
                state_color: true
              group_config:
                state_color: true
                secondary_info: last-updated
                card_mod:
                  style: |
                    :host {
                      {% set color = {0:'var(--primary-text-color)', 1:'Green', 2:'Yellow', 3:'Orange', 4:'Red'} %}
                      color: {% if is_state_attr(config.entity,'integration', 'dpc') %} {{color[state_attr(config.entity, 'level')|int]}}
                              {% elif 'binary_sensor.meteoalarm' in config.entity %} 
                                {{state_attr('binary_sensor.global_natural_alert','meteoalarm_level')}}
                              {% elif 'burze' in config.entity and states(config.entity) == 'on'%}
                                {% set d = state_attr(config.entity,'distance') %}
                                {% if d %}
                                  {% if d <= 1 %}Red{% elif 1 < d <= 5 %}Orange{% elif 5 < d <= 10 %}Yellow{% else %}Green{% endif %}
                                {% endif %}
                              {% endif %};
                      {% if 'meteoalarm_custom' in config.entity and states(config.entity) > '0' %} 
                      --paper-item-icon-color: var(--paper-item-icon-active-color);
                      {% endif %}
                    }
            - type: custom:fold-entity-row # 2 group.geoalert
              card_mod:
                style: |
                  #head { 
                    {% if is_state('group.geoalert', 'on') %}
                    --paper-item-icon-color: var(--paper-item-icon-active-color);
                    {% endif %}
                  }
              head:
                entity: group.geoalert
                state_color: true
              group_config:
                state_color: true
                secondary_info: last-updated
                card_mod:
                  style: |
                    :host {
                        {% set color = {0:'var(--primary-text-color)', 1:'Green', 2:'Yellow', 3:'Orange', 4:'Red'} %}
                        color: {% if is_state_attr(config.entity,'integration', 'dpc') %} {{color[state_attr(config.entity, 'level')|int]}} 
                                {% elif 'meteoalarm' in config.entity %} {{state_attr('binary_sensor.global_natural_alert','meteoalarm_level')}}
                                {% elif 'quake' in config.entity and states('binary_sensor.lastquake') == 'on' %} {{color[state_attr('binary_sensor.lastquake', 'level')|int]}}
                              {% endif %};
                        {% if 'gdacs' in config.entity and states(config.entity) > '0' %} --paper-item-icon-color: var(--paper-item-icon-active-color);{% endif %}
                    }
  #################################################################
  ## * BUTTONS MAPS (AUTO-ENTITIES SENSORS ON Escluso dalla light) *
  #################################################################
  - type: conditional # CARDS VISUALIZZATE SOLO SE INPUT BOOLEAN NATURAL EVENTS OFF!!
    conditions:
      - entity: input_boolean.natural_events
        state: "off"
    card:
      type: custom:paper-buttons-row
      card_mod:
        style: |
          ha-card { background: none; border-radius: 0px; box-shadow: none; }
          div#states.card-content {padding-block-end: 0; padding-block-start: 0;}
      buttons:
        - entity: input_boolean.natural_events
          layout: icon|name
          name: Info
        - entity: group.natural_events
          layout: icon|name
          name: Map
          icon: mdi:image-off
          style:
            button:
              color: var(--paper-item-icon-color)
            ripple:
              color: orange
          tap_action:
            action: call-service
            service: input_select.select_option
            service_data:
              entity_id: input_select.geo_map, input_select.meteo_map, input_select.meteo_iframe
              option: Nessuna
        - entity: input_select.geo_map
          layout: icon|name
          name: Geo
          tap_action:
            action: call-service
            service: input_select.select_next
            service_data:
              entity_id: input_select.geo_map
          double_tap_action:
            action: call-service
            service: input_select.select_option
            service_data:
              option: Nessuna
              entity_id: input_select.geo_map
          style:
            button:
              color: var(--paper-item-icon-active-color)
          state_styles:
            nessuna:
              button:
                color: var(--paper-item-icon-color)
        - entity: input_select.meteo_map
          layout: icon|state
          style:
            button:
              color: var(--paper-item-icon-active-color)
          state:
            case: first
          state_styles:
            nessuna:
              button:
                color: var(--paper-item-icon-color)
          state_text:
            nessuna: Meteo
            temperatura nuvole infrared: Infrared
            nuvole infrared: Notte
            nuvole e sole: Giorno
            pioggia: Pioggia
            neve: Neve
            il meteo: Il meteo
            burze: Burze
            burze nord ovest: Burze NO
            burze nord est: Burze NE
            burze sud ovest: Burze SO
            burze sud est: Burze SE
            wwwlln: WWLLN
          tap_action:
            action: call-service
            service: input_select.select_next
            service_data:
              entity_id: input_select.meteo_map
          double_tap_action:
            action: call-service
            service: input_select.select_option
            service_data:
              option: Nessuna
              entity_id: input_select.meteo_map
        - entity: input_select.meteo_iframe
          layout: icon|state
          name: I-Frame
          state:
            case: first
          state_text:
            nessuna: I-Frame
            windy alert: Alert
            dpc radar: DPC Radar
            dpc bollettino criticità: Criticità
            dpc vigilanza meteo: Vigilanza
            blitzortung: Blitz
            radareu: Radareu
            volcanodiscovery: Vulcani
          tap_action:
            action: call-service
            service: input_select.select_next
            service_data:
              entity_id: input_select.meteo_iframe
          double_tap_action:
            action: call-service
            service: input_select.select_option
            service_data:
              option: Nessuna
              entity_id: input_select.meteo_iframe
          style:
            button:
              color: var(--paper-item-icon-active-color)
          state_styles:
            nessuna:
              button:
                color: var(--paper-item-icon-color)

  #################################################################
  ## INFO - Da qui in poi uguale per light e picture menu
  #################################################################
  - type: conditional # CARDS VISUALIZZATE SOLO SE INPUT BOOLEAN NATURAL EVENTS ON!!
    conditions:
      - entity: input_boolean.natural_events
        state: "on"
    card:
      type: vertical-stack
      cards:
        #################################################################
        ## BURZE
        #################################################################
        - type: conditional # BURZE conditional divider markdown
          conditions:
            - entity: binary_sensor.burze_storms_nearby
              state: "on"
          card:
            type: markdown
            card_mod:
              style: |
                ha-card {background: none; border-radius: 0px; box-shadow: none;}
            content: >-
              {%- set mycolor = 'var(--error-color)' -%}
              {%- set color2 = 'Gold' -%}
              ___

              #### TEMPORALI

              <font color="{{mycolor}}">{{state_attr('binary_sensor.burze_storms_nearby', 'number')}}</font>
              <font color="{{color2}}"><ha-icon icon="mdi:flash" style="width: 24px; height: 24px; transform: rotate(35deg);"></ha-icon></font> 
              in <font color="{{mycolor}}"> {{state_attr('binary_sensor.burze_storms_nearby', 'period')}}</font> minuti.
              Il più vicino è caduto a <font color="{{mycolor}}"> {{state_attr('binary_sensor.burze_storms_nearby', 'distance')}} Km </font> 
              a <font color="{{mycolor}}"> {{state_attr('binary_sensor.global_natural_alert','burze_direction')}} </font>
              </font> da casa.


              [Burze](https://burze.dzis.net) ~ [Blitzortung](http://map.blitzortung.org/#5.11/43.00/13.00)
        #################################################################
        ## DPC
        #################################################################
        - type: "custom:auto-entities" # DPC conditional divider markdown
          show_empty: false
          filter:
            include:
              - entity_id: sensor.*
                or:
                  - attributes:
                      integration: dpc
                      total_phenomena: ">0"
                  - attributes:
                      integration: dpc
                      total_alerts: ">0"
          card:
            #################################################################
            ## DPC SENSOR CRITICITA - VIGILANZA
            #################################################################
            type: markdown
            card_mod:
              style: |
                ha-card {background: none; border-radius: 0px; box-shadow: none;}
            # card_size: 4
            content: |-

              ___

              {% set entity = 'sensor.dpc_alert' %}

              #### PROTEZIONE CIVILE - [CRITICITA](https://mappe.protezionecivile.gov.it/it/mappe-rischi/bollettino-di-criticita)

              ##### ZONA {{state_attr(entity, 'zone_name')}}


              {% set color = {0:'White', 1:'Green', 2:'Gold', 3:'Orange', 4:'Red'} %}
              {% set days_map = {'today':'Oggi.', 'tomorrow':'Domani.', 'aftertomorrow': 'Dopodomani.'} %} 
              {%- for day in ['today', 'tomorrow'] %}
              {% set d = state_attr(entity, day) %}
              {%- set events = state_attr(entity, 'events_'+day) %}
              {%- if d %} 
              {%- if  d['level'] >= 1 %}

              |   |   |
              |:--|:--|
              | <font color="{{ color.get(d['level']) }}"/> <ha-icon icon="{{ 'mdi:numeric-' ~ d['level'] ~ '-box'}}"/></ha-icon> | {{ days_map[day] }} {{d['info']}} {{d['alert']}}</font> |
              {% endif %}
              {%- endif %}
              {%- if events %} 
              {%- for ev in events %}

              |   |   |   |
              |:--|:--|:--|
              | <font color="{{ color.get(ev['level']) }}"/> <ha-icon icon="{{ 'mdi:numeric-' ~ ev['level'] }}"/> | <font color="{{ color.get(ev['level']) }}"/> <ha-icon icon="{{ ev['icon'] }}"/> | {{ ev['alert'] }} {{ ev['info'] }} criticità per rischio {{ ev['risk'] }} |

              {%- endfor %} 
              {%- endif %}
              {%- endfor %}

              ___

              {% set entity = 'sensor.dpc_vigilance' %}

              #### PROTEZIONE CIVILE - [VIGILANZA METEO](https://mappe.protezionecivile.it/it/mappe-rischi/bollettino-di-vigilanza)

              ##### ZONA {{state_attr(entity, 'zone_name')}}

              {% set color = {0:'White', 1:'Green', 2:'Gold', 3:'Orange', 4:'Red', 5: 'BlueViolet'} %}
              {# set color_vigilance = {0:'#FFFFFF', 1:'#008000', 2:'#C3FFFE', 3:'#50FFFF', 4:'#508BFF', 5: '#A040FF'} #}
              {% set color_v = {0:'White', 1:'Green', 2:'LightCyan', 3:'BabyBlue', 4:'CornflowerBlue', 5: 'BlueViolet'} %}
              {% set day = {'today':'Oggi.', 'tomorrow':'Domani.', 'aftertomorrow': 'Dopodomani.'} %} 
              {%- for status in ['today', 'tomorrow','aftertomorrow'] %}
              {% set v = state_attr(entity, status) %}
              {%- if v %} 
              {%- if v['level'] >= 1 %}
              <font color="{{ color.get(v['level']) }}"/> <ha-icon icon="{{ v['icon'] }}"/></ha-icon> {{ day[status] }} Quantitativi previsti {{ v['precipitation'] }} </font>
              {%- endif %}
              {%- if v.phenomena %} 
              {% for d in v.phenomena %}

              |   |   |
              |:--|:--|
              | <ha-icon icon="{{ d['icon'] }}"/> |{{ d['event'] }} {{ d['value'] }} [{{ d['distance'] }} Km {{ d['direction'] }}] |

              {%- endfor %}
              {%- endif %}
              {%- endif %}
              {%- endfor %}

              [Sito Web Protezione Civile](https://www.protezionecivile.gov.it/it/) ~ [Radar](https://mappe.protezionecivile.it/it/mappe-rischi/piattaforma-radar)

        #################################################################
        ## METEOALARM
        #################################################################
        - type: conditional
          conditions:
            - entity: binary_sensor.meteoalarm
              state: "on"
          card:
            type: markdown
            card_mod:
              style: |
                ha-card {background: none; border-radius: 0px; box-shadow: none;}
            content: >
              ___

              #### METEOALARM

              {% set mycolor = 'var(--primary-text-color)' %}

              {% set global = 'binary_sensor.global_natural_alert' %}
              {% set l = state_attr('binary_sensor.meteoalarm', 'awareness_level')|default %}
              {% set t = state_attr('binary_sensor.meteoalarm', 'awareness_type')|default %}
              <font color="{{state_attr(global,'meteoalarm_level')}}"> <ha-icon icon="{{state_attr(global, 'meteoalarm_level_icon')}}"></ha-icon></font>
              <font color="{{state_attr(global,'meteoalarm_level')}}"> <ha-icon icon="{{state_attr(global, 'meteoalarm_type_icon')}}"></ha-icon></font>
              <font color="{{state_attr(global,'meteoalarm_level')}}"> {{state_attr('binary_sensor.meteoalarm', 'event')}}
              <img src="https://www.meteoalarm.eu/documents/rss/wflag-l{{'0' if not l else l.split(';')[0]}}-t{{'0' if not t else t.split(';')[0]}}.jpg"></font>
              <font color="{{mycolor}}"> **{{state_attr('binary_sensor.meteoalarm', 'urgency')|upper}}**</font><br>
              {% set days = ["Domenica", "Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato"] %}
              {% set start = as_timestamp(state_attr('binary_sensor.meteoalarm', 'effective')) %}
              {% set end = as_timestamp(state_attr('binary_sensor.meteoalarm', 'expires')) %}
              <font>Da {{days[start|timestamp_custom('%w')|int]}}{{start|timestamp_custom(' %d alle %H:%M')}}</font>
              a {{days[end|timestamp_custom('%w')|int]}}{{end|timestamp_custom(' %d alle %H:%M')}}</font><br><br>
              **Titolo**<br>
              <font color="{{mycolor}}"> {{state_attr('binary_sensor.meteoalarm', 'headline')}} </font><br><br>
              **Descrizione**<br>
              <font color="{{mycolor}}"> {{(state_attr('binary_sensor.meteoalarm', 'description')|default('',true)).split('(DISCLAIMER')[0]}} </font><br>
              **Istruzioni**<br>
              <font color="{{mycolor}}"> {{state_attr('binary_sensor.meteoalarm', 'instruction')}} </font><br><br>
              [MeteoAlarm]({{state_attr('binary_sensor.meteoalarm', 'web')|replace('http://','https://')}})
        #################################################################
        ## METEOALARM CUSTOM
        #################################################################
        - type: conditional
          conditions:
            - entity: sensor.meteoalarm_custom
              state_not: "0"
          card:
            type: markdown
            card_mod:
              style: |
                ha-card {background: none; border-radius: 0px; box-shadow: none;}
            content: >
              ___

              #### METEOALARM CUSTOM

              {% set mycolor = 'var(--primary-text-color)' %}

              {%set day = {'today':'Oggi', 'tomorrow':'Domani'} %}
              {%set color = {'Green':'Verde', 'Yellow':'Gialla', 'Orange':'Arancione', 'Red':'Rossa'} %}
              {%set dict_code={'Green':'1','Yellow':'2','Orange':'3','Red':'4'}%}
              {% set dict_type={'No-warnings': 'Nessun Avviso','Wind': 'Vento',
              'Snow/Ice': 'Neve-Ghiaccio','Thunderstorms': 'Temporali',
              'Fog': 'Nebbia','Extreme high temperature': 'Caldo intenso',
              'Extreme low temperature': 'Freddo intenso',
              'Coastal Event': 'Eventi Costieri','Forestfire': 'Incendi bischivi',
              'Avalanches': 'Valanghe','Rain': 'Pioggia',
              'Unavailable': 'Non disponibile','Flood': 'Alluvione',
              'Rain-Flood': 'Pioggia-Alluvione'} %}
              {%set type={'No-warnings': '0','Wind': '1',
              'Snow/Ice': '2','Thunderstorms': '3',
              'Fog': '4','Extreme high temperature': '5',
              'Extreme low temperature': '6',
              'Coastal Event': '7','Forestfire': '8',
              'Avalanches': '9','Rain': '10',
              'Unavailable': '11','Flood': '12',
              'Rain-Flood': '13'}%}
              {%- if not is_state('sensor.meteoalarm_custom', '0') -%}
                {%- for s  in ['today', 'tomorrow'] -%}
                  {%- set v = state_attr('sensor.meteoalarm_custom', s) -%}
                    {%- if v -%}
                      {%- for d  in v %}
                      {% set l = dict_code[d['code']] %}
                      {% set t = type[d['event']] %}
              **{{day[s]}}:** <img src="https://www.meteoalarm.eu/documents/rss/wflag-l{{'0' if not l else l.split(';')[0]}}-t{{'0' if not t else t.split(';')[0]}}.jpg"> <font color="{{d['code']}}">**{{dict_type[d['event']]}}** </font>
              **Allerta:** <font color="{{d['code']}}"><ha-icon icon="{{'mdi:numeric-'~dict_code[d['code']]~'-box'}}" style="width: 36px; height: 36px;"></ha-icon>{{color[d['code']]}}</font><br>
              Descrizione: <font color="{{mycolor}}">{{d['italiano']}}</font><br>
              Data: <font color="{{mycolor}}">{{d['start']|trim("CEST")|replace('.','/')}} - {{d['end']|trim("CEST")|replace('.','/')}}</font><br>
                      {%- endfor -%}
                    {%- endif -%}
                {%- endfor -%}
              {%- endif %}

              [MeteoAlarm]({{state_attr('binary_sensor.meteoalarm', 'web')}})
        #################################################################
        ## LASTQUAKE
        #################################################################
        - type: conditional # TERREMOTO conditional
          conditions:
            - entity: binary_sensor.lastquake
              state: "on"
          card:
            type: vertical-stack
            cards:
              - type: markdown
                entity_id:
                  - binary_sensor.lastquake
                card_mod:
                  style: |
                    ha-card {background: none; border-radius: 0px; box-shadow: none;}
                    ha-markdown {padding-bottom: 0 !important;}
                content: >-
                  ___

                  #### TERREMOTI - ULTIME 24h 
                  [<img src="https://www.hsit.it/images/favicon.png"/> Hai Sentito Il Terremoto](http://www.haisentitoilterremoto.it/)

                  {%- set url = "http://shakemap.rm.ingv.it/shake4/data/{}/current/products/{}.jpg" -%}
                  {%- set url2 = "http://shakemap.ingv.it/shake4/data/{}/current/products/{}.jpg" -%}
                  {%- set entityid = 'binary_sensor.lastquake' -%}
                  {%- set id = state_attr(entityid, 'event_id') -%}
                  {%- set data_utc = state_attr(entityid, 'publication_date') -%}
                  {%- set magnitudo = (state_attr(entityid, 'magnitude')|float) if not none else '0' -%}
                  {%- set code = {0:'White', 1:'Green', 2:'Gold', 3:'Orange', 4:'Red'} -%}
                  {%- set color = code[state_attr('binary_sensor.lastquake', 'level')|int] -%}
                  {%- set lat = state_attr(entityid, 'lat') -%}
                  {%- set long = state_attr(entityid, 'long') -%}
                  <font>

                  **<font color="{{color}}">{{as_timestamp(data_utc)|timestamp_custom ('%H:%M:%S del %d/%m/%Y')}}</font>**<br><br>
                  Un terremoto di magnitudo **<font color="{{color}}">{{magnitudo}}</font>**<br>
                  è avvenuto nella zona: [{{state_attr(entityid, 'region')}}](https://www.openstreetmap.org/?mlat={{lat}}&mlon={{long}}#map=12/{{lat}}/{{long}})<br>
                  a <font color="{{color}}">**{{state_attr(entityid, 'distance')}}**</font> km da casa,<br>
                  con coordinate epicentrali {{lat}}, {{long}}.

                  {% set state_dict = {'home': 'casa', 'not_home': 'fuori casa', 'unknown': '❓'} %}
                  {% for person in expand(states.person) %}
                  {% if 'latitude' in person.attributes and person.attributes.latitude is not none %}
                  {% set distanza = distance(lat|default(0), long|default(0), person.entity_id|default(0)) %}
                  <br>{{"📍{} ({}) a circa {} km dall'epicentro.".format(person.name|upper, state_dict.get(person.state, person.state), distanza|round(1)) }}
                  {% else %}
                  <br>{{"📍{} ({})".format(person.name|upper, state_dict.get(person.state, person.state)) }}
                  {% endif %}
                  {% endfor %}</font><br>

                  {% if magnitudo >= 3 %}
                  [Intensity]({{url.format(id,'intensity')}}) ~ 
                  [PGA]({{url.format(id,'pga')}}) ~ [PGV]({{url.format(id,'pgv')}}) ~ [PSA0]({{url.format(id,'psa0p3')}}) ~ [PSA1]({{url.format(id,'psa1p0')}}) ~ 
                  [HSIT](http://eventi.haisentitoilterremoto.it/{{id}}/{{id}}_mcs.jpg)<br>

                  <!-- Example 
                    Markdown
                    [![](/local/hassiohelp/downloads/lastquake.jpg)](http://shakemap.rm.ingv.it/shake4/viewLeaflet.html?eventid={{id}})
                  -->

                  {% if is_state('binary_sensor.download_file', 'on') %}
                  <a href="http://shakemap.rm.ingv.it/shake4/view.html?eventid={{id}}"><img src="/local/hassiohelp/downloads/lastquake.jpg?t='{{now().timestamp()}}'"></a>
                  {% else %}
                  <a href="http://shakemap.rm.ingv.it/shake4/view.html?eventid={{id}}"><img src="http://shakemap.rm.ingv.it/shake4/data/{{id}}/current/products/pga.jpg"></a>
                  {% endif %}{% endif %}

                  <center>
                  <a href="http://terremoti.ingv.it/"> <img src="https://www.ingv.it/images/INGV_Acronimo_50.png" width="100" ></a>

                  <!-- Examples
                    Interactive Map
                    http://shakemap.rm.ingv.it/shake4/viewLeaflet.html?eventid=
                    Map Google
                    [{{state_attr(entityid, 'region')}}](http://maps.google.com/maps?z=8&q=loc:{{lat}}+{{long}})
                    Map Open Streat Map
                    [{{state_attr(entityid, 'region')}}](https://www.openstreetmap.org/?mlat={{lat}}&mlon={{long}}#map=8/{{lat}}/{{long}})
                  -->

              - type: custom:auto-entities # CONDITIONAL ULTIMI {count} TERREMOTI
                show_empty: false
                sort:
                  {
                    attribute: publication_date,
                    method: attribute,
                    reverse: true,
                    count: 4,
                    first: 0,
                  }
                filter:
                  include:
                    - entity_id: geo_location.*
                      attributes:
                        source: ingv_centro_nazionale_terremoti
                card:
                  type: entities
                  entity_id: this.entity_id
                  card_mod:
                    style: |
                      ha-card {background: none; border-radius: 0px; box-shadow: none;}
        #################################################################
        ## GDACS
        #################################################################
        - type: custom:auto-entities
          show_empty: false
          # sort:
          #   {attribute: from_date, method: attribute, reverse: true, count: 3, first: 1}
          filter:
            include:
              - entity_id: geo_location.*
                attributes:
                  source: gdacs
                  alert_level: "/^((?!Green).)*$/" # Escludi string
          card:
            type: markdown
            card_mod:
              style: |
                ha-card {background: none; border-radius: 0px; box-shadow: none;}
            content: |
              ___

              #### GDACS

              {% set mycolor = 'var(--primary-text-color)' %}

              {% for state in states.geo_location %}
              {% if state.attributes.source=="gdacs" %}
              <font color="{{ state.attributes.alert_level }}"><ha-icon icon="{{ state.attributes.icon }}"></ha-icon> **{{ state.name }}</font>**

              Descrizione: <font color="{{mycolor}}">{{ state.attributes.description }}</font>

              *Rilasciato: <font color="{{mycolor}}">{{ state.attributes.from_date.strftime("%d.%m.%Y %H:%M") }}*</font>
              *Fine: <font color="{{mycolor}}">{{ state.attributes.to_date.strftime("%d.%m.%Y %H:%M") }}*</font>
              {% endif %}
              {% endfor %}
  #################################################################
  ## MAPS
  #################################################################
  - type: conditional # METEO
    conditions:
      - entity: input_select.meteo_map
        state_not: Nessuna
    card:
      type: picture-entity
      card_mod:
        style: |
          ha-card {
            border-radius: var(--ha-card-border-radius);
            border: solid 1px var(--accent-color);
            box-shadow: none;
            margin: 16px;
          }
      title: Nuvole
      entity: input_select.meteo_map
      tap_action:
        action: call-service
        service: input_select.select_next
        service_data:
          entity_id: input_select.meteo_map
      hold_action:
        action: call-service
        service: input_select.select_previous
        service_data:
          entity_id: input_select.meteo_map
      state_image:
        Nuvole e Sole: https://api.sat24.com/animated/IT/visual/3/
        Nuvole Infrared: https://api.sat24.com/animated/IT/infraPolair/3/
        Temperatura Nuvole Infrared: https://www.meteo60.fr/satellites/animation-satellite-ir-france.gif
        Pioggia: https://api.sat24.com/animated/IT/rainTMC/3/
        Neve: https://api.sat24.com/animated/EU/snow/3/
        Il Meteo: http://cdn-radar.ilmeteo.it/italy.gif
        Burze: https://burze.dzis.net/italia_fulmine_lebhaft.gif
        Burze Nord Ovest: https://burze.dzis.net/italia_fulmine_lebhaft_gruppi_nw.gif
        Burze Nord Est: https://burze.dzis.net/italia_fulmine_lebhaft_gruppi_ne.gif
        Burze Sud Ovest: https://burze.dzis.net/italia_fulmine_lebhaft_gruppi_sw.gif
        Burze Sud Est: https://burze.dzis.net/italia_fulmine_lebhaft_gruppi_se.gif
        WWLLN: https://wwlln.net/WWLLN_movies/Movie_of_Lightning_in_EurAfrica_BIG.gif
      entities:
        - entity: input_select.meteo_map

  - type: conditional # GEO
    conditions:
      - entity: input_select.geo_map
        state: Posizione Geografica
    card:
      type: map
      card_mod:
        style: |
          ha-card {
            border-radius: var(--ha-card-border-radius);
            border: solid 1px var(--accent-color); 
            box-shadow: none;
            margin: 16px;
          }
      # entities:
      #   - entity: person.claudio
      geo_location_sources:
        - all
      dark_mode: true
      default_zoom: 8
      aspect_ratio: "16:9" #100%
      hours_to_show: 72

  - type: conditional # IFRAME
    conditions:
      - entity: input_select.meteo_iframe
        state: Windy Alert
    card:
      type: iframe
      card_mod:
        style: |
          ha-card {
            border-radius: var(--ha-card-border-radius);
            margin-top: 8px;
          }
      aspect_ratio: 100%
      url: >-
        https://embed.windy.com/embed2.html?lat=42.000&lon=12.000&zoom=5
        &level=surface&overlay=capAlerts&menu=&type=map&location=coordinates
        &detail=&detailLat=42.000&detailLon=12.000
  - type: conditional # DPC
    conditions:
      - entity: input_select.meteo_iframe
        state: DPC Radar
    card:
      type: iframe
      card_mod:
        style: |
          ha-card {
            border-radius: var(--ha-card-border-radius);
            margin-top: 8px;
          }
      aspect_ratio: 100%
      url: https://radar.protezionecivile.it/radar-dpc/#/pages/dashboard
      # http://www.bulkdachecker.com/url-extractor/

  - type: conditional
    conditions:
      - entity: input_select.meteo_iframe
        state: DPC Bollettino Criticità
    card:
      type: custom:config-template-card
      entities:
        - sensor.date
      card:
        type: iframe #custom:hui-iframe-card
        card_mod:
          style: |
            ha-card {
              border-radius: var(--ha-card-border-radius);
              margin-top: 8px;
            }
        aspect_ratio: 100%
        #hidden=switch,
        #maps...GOOGLE_SATELLITE, GOOGLE_HYBRID, GOOGLE_NORMAL OPEN_STREET_MAP, BING_AERIAL, , ORTHO_MAP, DARK_BASE_MAP
        url: >-
          ${'https://servizio-mappe.protezionecivile.it/#/view/dashboard?x=11.756&y=41.495&
          zoom=5.8&basemap=BING_AERIAL&appname=BollettinodiCriticità&file=
          https://raw.githubusercontent.com/pcm-dpc/DPC-Bollettini-Criticita-Idrogeologica-Idraulica/master/files/'
          +states['sensor.dpc_alert'].attributes.id+'.json&hidden=info,minimap&fase=today'}
  #
  - type: conditional
    conditions:
      - entity: input_select.meteo_iframe
        state: DPC Vigilanza Meteo
    card:
      type: custom:config-template-card
      entities:
        - sensor.date
      card:
        type: iframe #custom:hui-iframe-card
        card_mod:
          style: |
            ha-card {
              border-radius: var(--ha-card-border-radius);
              margin-top: 8px;
            }
        aspect_ratio: 100%
        url:
          >- #hidden=switch,... ## +(states['sensor.date'].state).replaceAll('-','')+ ##
          ${'https://servizio-mappe.protezionecivile.it/#/view/dashboard?x=11.756&y=41.495&
          zoom=5.8&basemap=OPEN_STREET_MAP&appname=Bollettino di Vigilanza&file=
          https://raw.githubusercontent.com/pcm-dpc/DPC-Bollettini-Vigilanza-Meteorologica/master/files/'
          +states['sensor.dpc_vigilance'].attributes.id+'.json&hidden=minimap,info&fase=today'}

  - type: conditional # Blitzortung
    conditions:
      - entity: input_select.meteo_iframe
        state: "Blitzortung"
    card:
      type: iframe
      card_mod:
        style: |
          ha-card {
            border-radius: var(--ha-card-border-radius);
            margin-top: 8px;
          }
      aspect_ratio: 100%
      url: https://map.blitzortung.org/#5.11/42.5/12.51 # Il Centro geografico d'Italia
      # <img src="http://terremoti.ingv.it/images/ingv_logo_colore.png" background="white"/><br>
  - type: conditional # Radareu
    conditions:
      - entity: input_select.meteo_iframe
        state: Radareu
    card:
      type: iframe
      card_mod:
        style: |
          ha-card {
            border-radius: var(--ha-card-border-radius);
            margin-top: 8px;
          }
      aspect_ratio: 100%
      url: http://www.radareu.cz/?lng=uk&core
  - type: conditional # Volcanodiscovery
    conditions:
      - entity: input_select.meteo_iframe
        state: Volcanodiscovery
    card:
      type: iframe
      card_mod:
        style: |
          ha-card {
            border-radius: var(--ha-card-border-radius);
            margin-top: 8px;
          }
      aspect_ratio: 100%
      url: https://earthquakes.volcanodiscovery.com/?L=12&zoom=6&lat=41&lon=13&minMag=3
