### INFO
  #   @author         :   Caio & Gianpi - www.hassiohelp.eu
  #   @date           :   01/08/2019 - update 09/10/2020
  #   @package        :   Natural_events
  #   @description    :   Information provided by MeteoAlarm, Burze, GDACS, DPC and INGV Italy
  ##########################################################################
  # DPC per trovare codice ISTAT: https://www.paginebianche.it/codice-istat 
  # METEOALARM Cerca il nome della tua Regione o ID: http://meteoalarm.eu/it_IT/0/0/IT-Italia.html 
  # Strumento per visualizzare il raggio delle zone https://www.mapdevelopers.com/draw-circle-tool.php

homeassistant:
  customize:
    ########################################################################
    ## CUSTOMIZE NODE ANCHORS
    ########################################################################
    package.node_anchors:
    ##--------------------- IMPOSTAZIONI DEL PACKAGE ---------------------##
      setting:
        # ⚓ SCRIPT centro notifiche: &script script.natural_events_notifications 
        ⚓SCRIPT centro notifiche: &script script.my_notify 
        ⚓SERVIZIO Notify: &notify 'telegram'
        ⚓MEDIA PLAYER Google: &media_player_google 'media_player.red'
        ⚓MEDIA PLAYER Alexa: &media_player_alexa 'media_player.studio'
        # Orario di riproduzione messaggi TTS (Per script.natural_events_notifications)
        ⚓DOPO LE: &after '07:00:00'
        ⚓PRIMA DELLE: &before '23:00:00'
      filter:
        ⚓RAGGIO ZONA MeteoAlert metri: &radius_meteoalert 25000
        ⚓RAGGIO ZONA GeoAlert metri: &radius_geoalert 1000000
        ⚓RAGGIO TERREMOTO km: &radius_quake 1000
        ⚓MAGNITUDO minimo: &magnitude 2
        ⚓RAGGIO BURZE km: &radius_burze 25
      secret: # Oppure inserire i dati direttamente al posto di !secret etcetc
        ⚓LATITUDINE per le zone: &latitude !secret latitude_home
        ⚓LONGITUDINE per le zone: &longitude !secret longitude_home
        ⚓REGIONE MeteoAlaram: &province !secret regione 
        ⚓ID Meteoalarm Custom: &meteoalarm_custom_id !secret meteoalarm_custom_id
        ⚓ISTAT DPC: &istat !secret istat
        ⚓API KEY Burze: &burze_api_key !secret burze_api_key
    ##--------------------- FINE IMPOSTAZIONI PACKAGE ---------------------##

############################################################################
##                               CUSTOMIZE
############################################################################
      customize: &customize
        package: 'Natural_events'
        author: 'Caio & Gianpi'
        webpage: 'www.hassiohelp.eu'
        version: '3.6'
      expose: &expose
        <<: *customize
        haaska_hidden: false
        homebridge_hidden: false

  ## Automation
    automation.natural_events_burze_notifications:
      <<: *customize
      friendly_name: "Burze Notifiche"
    automation.natural_events_gdacs_notifications:
      <<: *customize
      friendly_name: "Gdacs Notifiche"
    automation.natural_events_meteoalarm_notifications:
      <<: *customize
      friendly_name: "MeteoAlarm Notifiche"
    automation.natural_events_meteoalarm_custom_notifications:
      <<: *customize
      friendly_name: "MeteoAlarm Custom Notifiche"
    automation.natural_events_protezione_civile_notifications:
      <<: *customize
      friendly_name: "DPC Notifiche"
    automation.natural_events_quake_notifications:
      <<: *customize
      friendly_name: "INGV Notifiche"
    automation.natural_events_startup:
      <<: *customize
      friendly_name: "StartUp Natural events"
  ## Binary Sensor
    binary_sensor.global_natural_alert:
      <<: *customize
    binary_sensor.burze_storms_nearby:
      <<: *customize
      friendly_name: "Temporale nelle vicinanze"
      device_class: vibration
    binary_sensor.meteoalarm:
      <<: *customize
      friendly_name: MeteoAlarm
    binary_sensor.lastquake:
      <<: *customize
      friendly_name: Scossa Terremoto
      icon: mdi:pulse
    binary_sensor.shakemap:
      <<: *customize
      friendly_name: Check Shakemap
      icon: mdi:link
  ## Group
    group.natural_events:
      <<: *customize
      friendly_name: "Eventi Naturali"
      icon: mdi:location-enter
    group.geoalert:
      <<: *customize
      friendly_name: "Allerta Geologica"
      icon: mdi:earth
    group.meteoalert:
      <<: *customize
      friendly_name: "Allerta Meteo"
      icon: mdi:weather-lightning-rainy
  ## Input
    input_boolean.natural_events: 
      <<: *customize
      friendly_name: "Info e Impostazioni"
      icon: mdi:cogs
    input_boolean.natural_events_send_image:
      <<: *customize
      friendly_name: "Invia Immagini"
      icon: mdi:image
    input_select.geo_map:
      <<: *customize
      friendly_name: Geo Map
      icon: mdi:earth-box
    input_select.meteo_iframe:
      <<: *customize
      friendly_name: Iframe Map
      icon: mdi:image-frame
    input_select.meteo_map:
      <<: *customize
      friendly_name: Meteo Map
      icon: mdi:tooltip-image
  ## Sensor
    sensor.meteoalarm_custom:
      <<: *customize
      friendly_name: "MeteoAlarm Custom"
      unit_of_measurement: eventi
  ## Script
    script.natural_events_notifications:
      <<: *customize
      friendly_name: Centro Notifiche
      icon: mdi:account-tie
  ## Zone
    zone.geoalert:
      <<: *customize
      friendly_name: Zona Allerta Geologica
      icon: mdi:radiobox-marked
    zone.meteoalert:
      <<: *customize
      friendly_name: Zona Allerta Meteo
      icon: mdi:flash-circle
#######################################-#######################################
##                              CUSTOMIZE GLOB
#######################################-#######################################
  customize_glob:
    binary_sensor.dpc_*:
      <<: *customize
    automation.natural_events_*:
      <<: *customize
      icon: mdi:alpha-a-circle-outline
    script.natural_events_*:
      <<: *customize
    sensor.gdacs*:
      <<: *customize
      friendly_name: GDACS
      unit_of_measurement: eventi
#######################################-#######################################
##                                 COMPONENT
#######################################-#######################################

#-------------------------------------
# GDACS info https://www.home-assistant.io/integrations/gdacs/
#-------------------------------------
gdacs:
  # categories: [Drought, Earthquake, Flood, Tropical Cyclone, Tsunami, Volcano]
  radius: *radius_quake
  latitude: *latitude
  longitude: *longitude

#-------------------------------------
# GEO LOCATION info https://www.home-assistant.io/components/geo_location/
#-------------------------------------
geo_location:
  - platform: ingv_centro_nazionale_terremoti
    radius: *radius_quake
    minimum_magnitude: *magnitude

  - platform: usgs_earthquakes_feed
    feed_type: 'past_day_all_earthquakes'
    radius: *radius_quake
    minimum_magnitude: *magnitude
    # latitude: *latitude
    # longitude: *longitude
#-------------------------------------
# ZONE 
#-------------------------------------
zone:
  - name: geoalert
    latitude: *latitude
    longitude: *longitude
    radius: *radius_geoalert
    passive: true
  - name: meteoalert
    latitude: *latitude
    longitude: *longitude
    radius: *radius_meteoalert
    passive: true
#######################################-#######################################
##                                   INPUT
#######################################-#######################################
input_select:
  geo_map:
    options:
      - Posizione Geografica
      - Nessuna
  meteo_map:
    options:
      - Temperatura Nuvole Infrared
      - Nuvole Infrared
      - Nuvole e Sole
      - Pioggia
      - Neve
      - Il Meteo
      - Burze
      - Burze Nord Ovest
      - Burze Nord Est
      - Burze Sud Ovest
      - Burze Sud Est
      - WWLLN
      - Nessuna
  meteo_iframe:
    options:
      - Windy Alert
      - Protezione Civile
      - Blitzortung
      - Radareu
      - Volcanodiscovery
      - Nessuna
input_boolean:
  natural_events:
  natural_events_send_image:
#######################################-#######################################
##                                   GROUP
#######################################-#######################################
group:
  natural_events:
    entities:
      - group.meteoalert
      - group.geoalert
  meteoalert:
    entities:
      - binary_sensor.meteoalarm
      - binary_sensor.burze_storms_nearby
      - binary_sensor.dpc_temporali_oggi
      - binary_sensor.dpc_temporali_domani
      - sensor.meteoalarm_custom
  geoalert:
    entities:
      - binary_sensor.lastquake
      - binary_sensor.dpc_idraulico_domani
      - binary_sensor.dpc_idraulico_oggi
      - binary_sensor.dpc_idrogeologico_domani
      - binary_sensor.dpc_idrogeologico_oggi
#######################################-#######################################
##                               BINARY SENSOR
#######################################-#######################################
binary_sensor:
  #-------------------------------------
  # DPC info https://github.com/caiosweet/Home-Assistant-custom-components-DPC-Alert
  #-------------------------------------
  - platform: dpc
    name: 'dpc'
    istat: *istat
    warnings:
      - temporali_oggi
      - idraulico_oggi
      - idrogeologico_oggi
      - temporali_domani
      - idraulico_domani
      - idrogeologico_domani
    scan_interval: 900 # in seconds (default 1800 [30min])
  #-------------------------------------
  # BURZE info https://github.com/PiotrMachowski/Home-Assistant-custom-components-Burze.dzis.net
  #-------------------------------------
  - platform: burze_dzis_net
    latitude: *latitude
    longitude: *longitude
    api_key: *burze_api_key
    name: burze
    storms_nearby:
      radius: *radius_burze
  #-------------------------------------
  # METEOALARM INTEGRATION info https://www.home-assistant.io/components/meteoalarm/
  #-------------------------------------
  - platform: meteoalarm
    country: 'IT'
    province: *province
    language: 'it'
  #-------------------------------------
  # LAST QUAKE
  #-------------------------------------
  - platform: command_line # check URL
    name: shakemap
    device_class: connectivity
    command: response=$(curl -LIk -m 3 "{{state_attr('binary_sensor.lastquake', 'image_url')}}" -o /dev/null -w "%{http_code}\n" -s); test "$response" -eq 200 && echo "ON" || echo "OFF"
    scan_interval: 864000 # 10 gg
    value_template: '{{ value }}'

  - platform: template
    sensors:
      lastquake:
        friendly_name: Evento terremoto
        device_class: vibration
        # availability_template: False
        value_template: >-
          {% set x = states('sensor.time') %}
          {% set last_date = states.geo_location
            | selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
            | sort(attribute='attributes.publication_date')
            | map(attribute='attributes.publication_date') |list|last %}
          {{ ((as_timestamp(utcnow())-as_timestamp(last_date))/3600) <= 24 if last_date else False }}
        attribute_templates:
          distance: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
             |sort(attribute='attributes.publication_date')|map(attribute='state')|list|last}}
          lat: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.latitude')|list|last}}
          long: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.longitude')|list|last}}
          title: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.title')|list|last}}
          region: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.region')|list|last}}
          magnitude: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.magnitude')|list|last}}
          publication_date: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.publication_date')|list|last}}
          event_id: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.event_id')|list|last}}
          image_url: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.image_url')|list|last}}
          attribution: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.attribution')|list|last}}
          level: >-
            {%set m = states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.magnitude')|list|last|default(0)%}
              {% set m = m|float %}
              {%if 0<=m<=1.9%}0{%elif 2<=m<=2.9%}1{%elif 3<=m<=3.9%}2{%elif 4<=m<=5.9%}3{%else%}4{%endif%}
          external_id: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
            |sort(attribute='attributes.publication_date')|map(attribute='attributes.external_id')|list|last|replace('smi:','')}}
  #-------------------------------------
  # GLOBAL NATURAL ALERT PACKAGE
  #-------------------------------------
  - platform: template
    sensors:
      global_natural_alert:
        # availability_template: False
        friendly_name: Eventi Naturali
        device_class: safety
        value_template: >
          {{ is_state('group.natural_events', 'on') 
            or not is_state('sensor.meteoalarm_custom', '0')
          }}
        attribute_templates:
          burze_direction: >-
            {% set cardinal = state_attr('binary_sensor.burze_storms_nearby', 'direction') %}
            {% set dict_direction = {
              'N':'Nord',
              'NE':'Nord Est',
              'E':'Est',
              'SE':'Sud Est',
              'S':'Sud',
              'SW':'Sud Ovest',
              'W':'Ovest',
              'NW':'Nord Ovest', } %}
            {{ dict_direction[cardinal] if cardinal in dict_direction else cardinal }}
          burze_direction_icon: >-
            {% set cardinal = state_attr('binary_sensor.burze_storms_nearby', 'direction') %}
            {% set dict_direction = {
              'N':'arrow-up',
              'NE':'arrow-top-right',
              'E':'arrow-left',
              'SE':'arrow-bottom-right',
              'S':'arrow-down',
              'SW':'arrow-bottom-left',
              'W':'arrow-left',
              'NW':'arrow-top-left', } %}
            mdi:{{ dict_direction[cardinal] if cardinal in dict_direction else 'arrow-left-right' }}-bold-outline
          meteoalarm_type: >-
            {% set list_type = ['Nessun Avviso','Vento','Neve/Ghiaccio','Temporali','Nebbia','Temperature massime estreme','Temperature minime estreme',
            'Eventi Costieri', 'Incendi boschivi','Valanghe','Pioggia','Non disponibile','Alluvione','Pioggia/Alluvione'] %}
            {% set type = state_attr('binary_sensor.meteoalarm', 'awareness_type') %}
            {{ 'Non disponibile' if type == none else list_type[type.split(';')[0]|int] }}
          meteoalarm_type_icon: >-
            {% set dict_type = {
            0  : "shield-outline",
            1  : "weather-windy",
            2  : "snowflake-alert",
            3  : "weather-lightning",
            4  : "weather-fog",
            5  : "thermometer-plus",
            6  : "thermometer-minus",
            7  : "sailing",
            8  : "fire",
            9  : "shovel",
            10 : "weather-pouring",
            11 : "help-circle",
            12 : "waves",
            13 : "home-flood", } %}
            {% set type = state_attr('binary_sensor.meteoalarm', 'awareness_type') %}
            {{ 'mdi:help-circle' if type == none else 'mdi:'~dict_type[type.split(';')[0]|int]}}
          meteoalarm_level: >
            {% set code_color = state_attr('binary_sensor.meteoalarm', 'awareness_level') %}
            {{ 'White' if code_color == none else code_color.split(';')[1]|title }}
          meteoalarm_level_icon: >
            {% set code = state_attr('binary_sensor.meteoalarm','awareness_level') %}
            {{'mdi:numeric-0-box' if code == none else 'mdi:numeric-'~code.split(';')[0]~'-box'}}
          level: >-
            {% set dict_color = {'0':'White', '1':'Green', '2':'Yellow', '3':'Orange', '4':'Red'} %}
            {% set dict_code = {'White':'0','Green':'1','Yellow':'2','Orange':'3','Red':'4'} %}
            {% set ma_level = state_attr('binary_sensor.meteoalarm','awareness_level') %}
            {% set lev1 = '0' if not ma_level else ma_level.split(';')[0] %}
            {% set lev2 = expand('group.natural_events')
              | selectattr("attributes.level", 'defined')
              | join(', ', attribute='attributes.level')|default('0', True)|max %}
            {% macro custom_code() %}
              {%- for s  in ['today', 'tomorrow'] if not is_state('sensor.meteoalarm_custom', '0') -%}
                {% set v = state_attr('sensor.meteoalarm_custom', s) -%}
                  {% if v -%}
                    {% for d  in v -%}
                      {{dict_code[d['code']]}}
                    {% endfor -%}
                  {% endif -%}
              {%- endfor -%}
            {% endmacro -%}
            {% set lev3 = '0' if not custom_code() else custom_code() -%}
            {% set lev_color = [lev1,lev2,lev3]|max %}
            {{ dict_color.get(lev_color|max) }}
          code: >-
            {% set dict_code = {'White':'0','Green':'1','Yellow':'2','Orange':'3','Red':'4'} %}
            {% set ma_level = state_attr('binary_sensor.meteoalarm','awareness_level') %}
            {% set lev1 = '0' if not ma_level else ma_level.split(';')[0] %}
            {% set lev2 = expand('group.natural_events')
              | selectattr("attributes.level", 'defined')
              | join(', ', attribute='attributes.level')|default('0', True)|max %}
            {% macro custom_code() %}
              {%- for s  in ['today', 'tomorrow'] if not is_state('sensor.meteoalarm_custom', '0') -%}
                {% set v = state_attr('sensor.meteoalarm_custom', s) -%}
                  {% if v -%}
                    {% for d  in v -%}
                      {{dict_code[d['code']]}}
                    {% endfor -%}
                  {% endif -%}
              {%- endfor -%}
            {% endmacro -%}
            {% set lev3 = '0' if not custom_code() else custom_code() -%}
            {% set lev_color = [lev1,lev2,lev3]|max %}
            {{ lev_color|max }}
          icon: >-
            {% set dict_code = {'White':'0','Green':'1','Yellow':'2','Orange':'3','Red':'4'} %}
            {% set ma_level = state_attr('binary_sensor.meteoalarm','awareness_level') %}
            {% set lev1 = '0' if not ma_level else ma_level.split(';')[0] %}
            {% set lev2 = expand('group.natural_events')
              | selectattr("attributes.level", 'defined')
              | join(', ', attribute='attributes.level')|default('0', True)|max %}
            {% macro custom_code() %}
              {%- for s  in ['today', 'tomorrow'] if not is_state('sensor.meteoalarm_custom', '0') -%}
                {% set v = state_attr('sensor.meteoalarm_custom', s) -%}
                  {% if v -%}
                    {% for d  in v -%}
                      {{dict_code[d['code']]}}
                    {% endfor -%}
                  {% endif -%}
              {%- endfor -%}
            {% endmacro -%}
            {% set lev3 = '0' if not custom_code() else custom_code() -%}
            {% set lev_color = [lev1,lev2,lev3]|max %}
            mdi:numeric-{{ lev_color|max }}-box
#######################################-#######################################
##                                  SENSOR
#######################################-#######################################
sensor:
  #-------------------------------------
  # METEOALARM_M CUASTOM COMPONENT info https://github.com/kodi1/meteoalarm
  #-------------------------------------
  - platform: meteoalarm_m
    id: *meteoalarm_custom_id
    name: meteoalarm_custom
    scan_interval: 1800

  #-------------------------------------
  # SENSOR FOR CARD PICTURE ELEMENTS 
  #-------------------------------------
  - platform: template
    sensors:
      ## METEOALARM TEMPLATE TYPE SENSOR
      meteoalarm_type:
        friendly_name: Meteoalarm type
        value_template: >
          {{state_attr('binary_sensor.global_natural_alert', 'meteoalarm_type')}}
        icon_template: >
          {{state_attr('binary_sensor.global_natural_alert', 'meteoalarm_type_icon')}}
      ## METEOALARM TEMPLATE LEVEL SENSOR
      meteoalarm_level:
        friendly_name: Meteoalarm level
        value_template: >
          {{state_attr('binary_sensor.global_natural_alert', 'meteoalarm_level')}}
        icon_template: >
          {{state_attr('binary_sensor.global_natural_alert', 'meteoalarm_level_icon')}}
#######################################-#######################################
##                                 AUTOMATION
#######################################-#######################################
automation:
#----------------------------------------------------------------------------------------------------#
# START-UP - natural_events (Crea gruppo di tutti i binary sensor e aggiorna alcuni sensori all'avvio)
#----------------------------------------------------------------------------------------------------#
  - id: natural_events_startup
    alias: natural_events_startup
    initial_state: true
    trigger:
      - platform: homeassistant
        event: start
      - platform: state
        entity_id: automation.natural_events_startup
        to: 'on'
    action:
      - delay: 00:00:15
      - service: group.set
        data:
          object_id: geoalert
          add_entities: >
            {{states.sensor|selectattr('name','==','GDACS')|join(',','entity_id')|lower}}
      - service: homeassistant.update_entity
        entity_id: binary_sensor.lastquake
      - service: system_log.write
        data:
          message: "Successfully start Natural events package."
          level: info

#----------------------------------------------------------------------------------------------------#
# BURZE.NET Notifica caduti fulmini nel raggio impostato in radius_meteoalert 
#----------------------------------------------------------------------------------------------------#
  - id: natural_events_burze_notifications
    alias: natural_events_burze_notifications
    initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.burze_storms_nearby
    condition: >
      {{ trigger.to_state.state == 'on' and (trigger.from_state.state == 'off' 
      or trigger.to_state.attributes.distance < trigger.from_state.attributes.distance )}}
    variables:
      distance: " {{state_attr('binary_sensor.burze_storms_nearby', 'distance')|default(20,'0')}} "
    action:
      - service: *script
        data:
          call_no_annuncio: 1
          title: >-
            Burze ↯
            {% if trigger.from_state.state == 'off' %}
            {{ trigger.to_state.attributes.friendly_name }}.
            {% else %} AGGIORNAMENTO TEMPORALE. {% endif %}
          message: >-
            {% set num={'0':'0️⃣','1':'1️⃣','2':'2️⃣','3':'3️⃣','4':'4️⃣','5':'5️⃣','6':'6️⃣','7':'7️⃣','8':'8️⃣','9':'9️⃣'} %}
            {% set n = state_attr('binary_sensor.burze_storms_nearby', 'number') %}
            {% set d = state_attr('binary_sensor.burze_storms_nearby', 'distance')|default(20,'0') %}
            {% if d <= 1 %}🔴 {% elif 1 < d <= 5 %}🟠 {% elif 5 < d <= 10 %}🟡 {% else %}🟢 {% endif -%}
            Negli ultimi {{state_attr('binary_sensor.burze_storms_nearby', 'period')}} minuti
            {% for x in n|string -%}{{num[x]|default(x) -}}{% endfor %}⚡
            {% if n != 1 %}scariche di fulmini {% else %} fulmine scaricato {% endif %} 
            nel raggio di {{(state_attr('zone.meteoalert','radius') //1000)|int}} km.
            La scarica più vicina è avvenuta a {{state_attr('binary_sensor.burze_storms_nearby', 'distance')}} km 
            a {{state_attr('binary_sensor.global_natural_alert','burze_direction')}} da casa.
          message_tts: &tts_brurze >-
            {% if trigger.from_state.state == 'off' %} 
            Probabile arrivo di un temporale da {{state_attr('binary_sensor.global_natural_alert','burze_direction')}}. 
            {% else %} 
            Aggiornamento Temporale. Il fulmine più vicino è stato rilevato 
            a {{state_attr('binary_sensor.burze_storms_nearby', 'distance')}} km 
            a {{state_attr('binary_sensor.global_natural_alert','burze_direction')}} da casa.
            {% endif %}
          alexa: 
            message_tts: *tts_brurze
            media_player: *media_player_alexa
          google:
            message_tts: *tts_brurze
            media_player: *media_player_google
          file: >-
            {% if trigger.from_state.state == 'off' and is_state('input_boolean.natural_events_send_image', 'on') %}
            /config/www/hassiohelp/pkg_natural_events/burze.png
            {% else %}
            {% endif %}

#----------------------------------------------------------------------------------------------------#
# D. PROTEZIONE CIVILE - Notifica criticità meteo-idro nella provincia impostata - Vedi tabella a fine package
#----------------------------------------------------------------------------------------------------#
  - id: natural_events_protezione_civile_notifications
    alias: natural_events_protezione_civile_notifications
    mode: queued
    max_exceeded: silent
    initial_state: true
    trigger:
      platform: state
      entity_id: 
        - binary_sensor.dpc_idrogeologico_oggi
        - binary_sensor.dpc_idraulico_oggi
        - binary_sensor.dpc_temporali_oggi
        - binary_sensor.dpc_idrogeologico_domani
        - binary_sensor.dpc_idraulico_domani
        - binary_sensor.dpc_temporali_domani
    condition: >-
      {{ trigger.to_state.state == 'on' and (trigger.from_state.state == 'off' 
      or (trigger.to_state.attributes != trigger.from_state.attributes))}}
    action:
      - variables:
          name: "{{trigger.to_state.attributes.friendly_name}}"
          rischio: "{{trigger.to_state.attributes.rischio}}"
          allerta: "{{trigger.to_state.attributes.allerta}}"
          info: "{{trigger.to_state.attributes.info}}"
      - service: *script
        data:
          call_no_annuncio: 1
          title: >-
            Protezione Civile - {{rischio}}
            {% if trigger.from_state.state == 'on' %}
            AGGIORNAMENTO
            {% endif %}
          message: |
            {% set color = {'VERDE':'🟢', 'GIALLA':'🟡', 'ARANCIONE':'🟠', 'ROSSA':'🔴'} %}
            {% set risk = {'Temporali':'⚡', 'Idraulico':'💧', 'Idrogeologico':'🌊'} %}
            {{risk[rischio]}} {{name}}. 
            {{color[allerta]}} Allerta {{allerta}} {{info}}.
          message_tts: &tts_dpc >-
            Attenzione. {{name}}. Allerta {{allerta}} {{info}}.
          alexa: 
            message_tts: *tts_dpc
            media_player: *media_player_alexa
            # audio: >
            #  <audio src="soundbank://soundlibrary/weather/thunder/thunder_01"/>
            audio: soundbank://soundlibrary/weather/thunder/thunder_11
          google: 
            message_tts: *tts_dpc
            media_player: *media_player_google
          link: >-
            [Bollettino di criticità]({{trigger.to_state.attributes.link}})

#----------------------------------------------------------------------------------------------------#
# METEOALARM - Notifica criticità meteo nella regione impostata - Vedi tabella a fine package
#----------------------------------------------------------------------------------------------------#
  - id: natural_events_meteoalarm_notifications
    alias: natural_events_meteoalarm_notifications
    initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.meteoalarm
    condition: >-
      {{ trigger.to_state.state == 'on' and (trigger.from_state.state == 'off' 
      or trigger.to_state.attributes != trigger.from_state.attributes)}}
    action:
      - service: *script
        data:
          call_no_annuncio: 1
          title: >-
            MeteoAlarm -
            {% if trigger.from_state.state == 'off' %}
            {{ trigger.to_state.attributes.urgency}}. 
            {% else %}AGGIORNAMENTO.{% endif %}
          message: |
            {% set start = state_attr('binary_sensor.meteoalarm', 'effective') %}
            {% set end = state_attr('binary_sensor.meteoalarm', 'expires') %}
            {% set level = state_attr('binary_sensor.global_natural_alert','meteoalarm_level') %}
            {% set type = state_attr('binary_sensor.global_natural_alert','meteoalarm_type')|upper %}
            {% set color = {'White':['⚪', 'Bianca'],'Green':['🟢','Verde'], 
              'Yellow':['🟡','Gialla'], 'Orange':['🟠','Arancione'], 'Red':['🔴','Rossa']} %}
            {{color[level][0]}}{{type}}. Allerta {{color[level][1]}}
            Descrizione: {{state_attr('binary_sensor.meteoalarm', 'description')}}
            {{as_timestamp(start)|timestamp_custom('Valido dalle ore %H:%M del %d/%m')}}
            {{as_timestamp(end)|timestamp_custom(' alle ore %H:%M del %d/%m')}}
          message_tts: &tts_meteoalarm >
            {% set days = ["Domenica", "Lunedì", "Martedì", "Mercoledì", "Giovedì", "Venerdì", "Sabato"] %}
            oh no! per {{days[as_timestamp(state_attr('binary_sensor.meteoalarm', 'onset'))|timestamp_custom('%w', true)|int]}}, 
            {{state_attr('binary_sensor.meteoalarm', 'headline')}}, {{state_attr('binary_sensor.meteoalarm', 'description')}}
          alexa:
            message_tts: *tts_meteoalarm
            media_player: *media_player_alexa
          google:
            message_tts: *tts_meteoalarm
            media_player: *media_player_google
          file: >-
            {% if is_state('input_boolean.natural_events_send_image', 'on') %}
            {% set type = state_attr('binary_sensor.meteoalarm', 'awareness_type') %}
            /config/www/hassiohelp/pkg_natural_events/{{'meteoalarm_11' if type == none else 'meteoalarm_'~type.split(';')[0]}}.png
            {% else %}
            {% endif %}

#----------------------------------------------------------------------------------------------------#
# METEOALARM CUSTOM - Notifica criticità meteo nella regione impostata - Vedi tabella a fine package
#----------------------------------------------------------------------------------------------------#
  - id: natural_events_meteoalarm_custom_notifications
    alias: natural_events_meteoalarm_custom_notifications
    mode: queued
    max_exceeded: silent
    initial_state: true
    trigger:
      platform: state
      entity_id: sensor.meteoalarm_custom
    condition: "{{ not is_state('sensor.meteoalarm_custom', '0') }}"
    action:
      - service: *script
        data:
          call_no_annuncio: 1
          title: >-
            MeteoAlarm Custom
          message: |-
            {% set day = {'today':'Oggi', 'tomorrow':'Domani'} %}
            {% set color = {'White':['⚪', 'Bianca'],'Green':['🟢','Verde'], 'Yellow':['🟡','Gialla'], 'Orange':['🟠','Arancione'], 'Red':['🔴','Rossa']} %}
            {% set dict_type={
              'No-warnings': ['❌','Nessun Avviso'],'Wind': ['🌬','Vento'],
              'Snow/Ice': ['🌨','Neve-Ghiaccio'],'Thunderstorms': ['⚡','Temporali'],
              'Fog': ['🌫','Nebbia'],'Extreme high temperature': ['🌡','Caldo intenso'],
              'Extreme low temperature': ['❄','Freddo intenso'], 'Coastal Event': ['⚓','Eventi Costieri'],
              'Forestfire': ['🔥🌲','Incendi bischivi'], 'Avalanches': ['🏔','Valanghe'],
              'Rain': ['🌧','Pioggia'], 'Unavailable': ['❌','Non disponibile'],
              'Flood': ['🌊','Alluvione'], 'Rain-Flood': ['💧🌊','Pioggia-Alluvione']} %}
            {%- for s in ['today', 'tomorrow'] %}
            {%- set v = state_attr('sensor.meteoalarm_custom', s) %}
            {%- if v %}
            {{'‗‗‗‗‗‗‗‗‗‗‗‗‗‗‗‗‗‗‗'}}
            {{day[s]|upper}}
            {{'¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯'}}
            {%- for d in v %}
            {{color[d['code']][0] + dict_type[d['event']][0] + dict_type[d['event']][1]}} allerta {{color[d['code']][1]}}
            Descrizione: {{d['italiano']}}
            Data: {{d['start']|trim("CEST")|replace('.','/')}} - {{d['end']|trim("CEST")|replace('.','/')}}
            {%- endfor %}
            {%- endif %}
            {%- endfor %}
          message_tts: &tts_meteoalarm_custom >-
            {% set day = {'today':'Oggi', 'tomorrow':'Domani'} %}
            {% set color = {'White':'Bianca','Green':'Verde', 'Yellow':'Gialla', 'Orange':'Arancione', 'Red':'Rossa'} %}
            {% set dict_type={'No-warnings': 'Nessun Avviso','Wind': 'Vento',
              'Snow/Ice': 'Neve-Ghiaccio','Thunderstorms': 'Temporali',
              'Fog': 'Nebbia','Extreme high temperature': 'Caldo intenso',
              'Extreme low temperature': 'Freddo intenso',
              'Coastal Event': 'Eventi Costieri','Forestfire': 'Incendi bischivi',
              'Avalanches': 'Valanghe','Rain': 'Pioggia',
              'Unavailable': 'Non disponibile','Flood': 'Alluvione',
              'Rain-Flood': 'Pioggia-Alluvione'} %}
            {% set today = state_attr('sensor.meteoalarm_custom', 'today')|list %}
            {% set tomorrow = state_attr('sensor.meteoalarm_custom', 'tomorrow')|list %}
            ATTENZIONE.
            {% if today %}Per Oggi: 
            {% for risk in today -%}
            {{dict_type[risk['event']]}} con allerta {{color[risk['code']]}}.
            {{-'' if 'Nessun Avviso' in risk['italiano'] else risk['italiano']}}
            {% endfor %}
            {% endif %}
            {% if tomorrow %}Per domani: 
            {% for risk in tomorrow -%}
            {{dict_type[risk['event']]}} con allerta {{color[risk['code']]}}, 
            {{-'' if 'Nessun Avviso' in risk['italiano'] else risk['italiano']}}.
            {% endfor %}
            {% endif %}
          alexa:
            message_tts: *tts_meteoalarm_custom 
            media_player: *media_player_alexa
          google:
            message_tts: *tts_meteoalarm_custom
            media_player: *media_player_google

#----------------------------------------------------------------------------------------------------#
# GEO LOCATION - Notifica Terremoti
#----------------------------------------------------------------------------------------------------#
  # INGV
  - id: natural_events_quake_notifications
    alias: natural_events_quake_notifications
    mode: queued
    max_exceeded: silent
    initial_state: true
    trigger:
      - platform: geo_location
        source: 'ingv_centro_nazionale_terremoti'
        zone: zone.geoalert
        event: enter
    condition: >-
      {{((as_timestamp(utcnow())-as_timestamp(trigger.to_state.attributes.publication_date))/3600*60)|int < 60}}
    action:
      - service: homeassistant.update_entity
        entity_id: binary_sensor.shakemap
      - service: *script
        data:
          call_no_annuncio: 1
          title: >-
            Rilevato terremoto. Epicentro: {{ trigger.to_state.attributes.region }}
          message: >-
            {% set data_utc = trigger.to_state.attributes.publication_date %}
            Rilevato terremoto di magnitudo: {{trigger.to_state.attributes.magnitude}} 
            a una distanza di {{ trigger.to_state.state }} Km da casa. 
            Epicentro: {{ trigger.to_state.attributes.region }}
            {{as_timestamp(data_utc)|timestamp_custom ('Data %d/%m/%Y Ore %H:%M:%S')}}
            {% if trigger.to_state.attributes.image_url and is_state('binary_sensor.shakemap', 'off') %}
            [Immagine]({{trigger.to_state.attributes.image_url}})
            {% endif %}
          message_tts: &tts_quake >-
            Rilevato terremoto a {{trigger.to_state.state}} km.
            Epicentro {{trigger.to_state.attributes.region}}.
            Magnitudo {{trigger.to_state.attributes.magnitude}}.
          alexa:
            message_tts: *tts_quake
            media_player: *media_player_alexa
          google: 
            message_tts: *tts_quake
            media_player: *media_player_google
          url: >-
            {% if is_state('binary_sensor.shakemap', 'on') %}
            {{trigger.to_state.attributes.image_url}}
            {% endif %}

  # USGS
  - id: natural_events_quake_notifications_usgs
    alias: natural_events_quake_notifications_usgs
    mode: queued
    max_exceeded: silent
    initial_state: true
    trigger:
      - platform: geo_location
        source: usgs_earthquakes_feed
        zone: zone.geoalert
        event: enter
    condition: >
      {{((as_timestamp(utcnow())-as_timestamp(trigger.to_state.attributes.time))/3600*60)|int < 60}}
    action:
      - service: *script
        data:
          call_no_annuncio: 1
          title: >-
            USGS - Rilevato terremoto. Epicentro: {{ trigger.to_state.attributes.place }}
          message: >-
            {% set data_utc = trigger.to_state.attributes.time %}
            Rilevato terremoto di magnitudo: {{trigger.to_state.attributes.magnitude}} 
            a una distanza di {{ trigger.to_state.state }} Km da casa. 
            Epicentro: {{ trigger.to_state.attributes.place }}
            {{as_timestamp(data_utc)|timestamp_custom ('Data %d/%m/%Y Ore %H:%M:%S')}}
            [LINK MAPPE](https://earthquake.usgs.gov/earthquakes/eventpage/{{trigger.to_state.attributes.external_id}}/executive)
          message_tts: &tts_usgs >-
            Evento sismico a {{trigger.to_state.state}} km.
            Epicentro {{trigger.to_state.attributes.place}}.
            Magnitudo {{trigger.to_state.attributes.magnitude}}.
          alexa:
            message_tts: *tts_usgs
            media_player: *media_player_alexa
          google:
            message_tts: *tts_usgs
            media_player: *media_player_google

#----------------------------------------------------------------------------------------------------#
# GEO LOCATION - Notifica GDACS # Global Disaster Alert and Coordination System
#                               # Sistema di allarme e coordinamento globale per le catastrofi
#----------------------------------------------------------------------------------------------------#
  - id: natural_events_gdacs_notifications
    alias: natural_events_gdacs_notifications
    mode: queued
    max_exceeded: silent
    initial_state: true
    trigger:
      - platform: geo_location
        source: 'gdacs'
        zone: zone.geoalert
        event: enter
    condition: >
      {{as_timestamp(trigger.to_state.attributes.to_date) > as_timestamp(utcnow()) 
        or trigger.to_state.attributes.alert_level != 'Green'}}
    action:
      - variables:
          from_data: "{{trigger.to_state.attributes.from_date}}"
          to_data: "{{trigger.to_state.attributes.to_date}}"
          event_type: "{{trigger.to_state.attributes.event_type}}"
          event:
            Earthquake: 'Terremoto'
            Tropical cyclone: 'Ciclone tropicale'
            Flood: 'Inondazione'
            Volcano: 'Vulcano'
            Drought: 'Siccità'
      - service: *script
        data:
          call_no_annuncio: 1
          title: >-
            GDACS: {{ event[event_type] }}
          message: |-
            Avviso di disastro globale: {{ event[event_type] }}
            Descrizione: {{ trigger.to_state.attributes.description }}
            Rilasciato: {{ '-' if not from_date else as_timestamp(from_date)|timestamp_custom("%d.%m.%Y %H:%M") }}
            Fine: {{ '-' if not to_date else as_timestamp(to_date)|timestamp_custom("%d.%m.%Y %H:%M") }}
          message_tts: &tts_gdacs >-
            Avviso di disastro globale: {{ event[event_type] }}
          alexa:
            message_tts: *tts_gdacs
            media_player: *media_player_alexa
          google:
            message_tts: *tts_gdacs
            media_player: *media_player_google
#######################################-#######################################
##                                  SCRIPT
#######################################-#######################################
script:
  natural_events_notifications:
    alias: Notifiche Geo Meteo Alert 
    mode: queued
    max_exceeded: silent
    sequence:
    - variables:
        google: *media_player_google
        alexa: *media_player_alexa
        notify: *notify
        message_tts: "{{message_tts|replace('\n','')|replace('   ',' ')|replace('  ',' ')}}" #|regex_replace(find="\s+|_", replace=" ")
        notify_service: "{{'' if '.' in notify else 'notify.'}}{{notify|replace(' ','_')}}"
    - choose: # URL/FILE IMAGE + TEXT
        - conditions:
            - "{{(file|length > 1 or url|length > 1) and notify|length > 1}}"
          sequence:
          - service: "{{notify_service}}"
            data: 
              title: "{{title}}"
              message: "{{message}}"
              data:
                photo:
                  - "{{'url' if url else 'file'}}": "{{url if url else file}}"
                    caption: |
                      {{title}}
                      {{message}}
      default: # TEXT
        - service: "{{notify_service}}"
          data:
            title: "{{title}}"
            message: "{{message}}"
    - choose: # AUDIO (DND)
      - conditions:
        - condition: time
          after: *after
          before: *before
        - "{{message_tts|length > 1}}"
        sequence:
        - choose: # GOOGLE
          - conditions: "{{google|length > 1}}"
            sequence:
            - service: tts.google_translate_say
              data:
                entity_id: "{{google}}"
                message: "{{message_tts}}"
        - choose: # ALEXA
          - conditions: "{{alexa|length > 1}}"
            sequence:
            - service: notify.alexa_media
              data:
                target: "{{alexa}}"
                message: "{{message_tts}}"
                data:
                  type: tts
        - delay:
            seconds: "{{message_tts|wordcount // 2+2}}"
          # Calcolo semplice e approssimativo del tempo di riproduzione TTS tra un messaggio ed il successivo
            # Per google si può utilizzare anche l'attributo media_duration
            # per evitare un delay, si può utilizzare un'altra tecnica (timer)
            # vedi https://github.com/caiosweet/notification-hub/blob/master/package/centro_notifiche/hub_alexa.yaml#L347

#######################################-#######################################
##                                  LEGEND
#######################################-#######################################

### METEOALARM LEGEND
    #### Awareness Types
    # | Code | Type                      |
    # |------|---------------------------|
    # | 0    | No Warnings               | Nessun Avviso
    # | 1    | Wind                      | Vento
    # | 2    | Snow-Ice                  | Neve-Ghiaccio
    # | 3    | Thunderstorm              | Temporali
    # | 4    | Fog                       | Nebbia
    # | 5    | Extreme High Temperatures | Temperature massime estreme
    # | 6    | Extreme Low Temperatures  | Temperature minime estreme
    # | 7    | Costal Event              | Eventi Costieri
    # | 8    | Forest Fire               | Incendi bischivi
    # | 9    | Avalanche                 | Valanghe
    # | 10   | Rain                      | Pioggia
    # | 11   | Unavailable               | Non disponibile
    # | 12   | Flooding                  | Alluvione
    # | 13   | Rain-Flooding             | Pioggia-Alluvione

    #### Awareness Levels
    # | Code | Level             | 
    # |------|-------------------|-------------------|
    # | 0    | White/Unknown     | Bianco/Sconosciuto
    # | 1    | Green/No Warnings | Verde/Nessun Avviso
    # | 2    | Yellow            | Giallo
    # | 3    | Orange            | Arancione
    # | 4    | Red               | Rosso

    ## DIPARTIMENTO PROTEZIONE CIVILE LEGEND
    # | Code | Level             | Criticità
    # |------|-------------------|-------------------|
    # | 0    | BIANCA            | Non disponibile
    # | 1    | VERDE             | Nessun Avviso
    # | 2    | GIALLA            | Ordinaria
    # | 3    | ARANCIONE         | Moderata
    # | 4    | ROSSA             | Elevata

#######################################-#######################################
##                                END PACKAGE
#######################################-#######################################

