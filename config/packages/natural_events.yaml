## INFO üì¶
##  üòÖ Caio & Gianpi [hassiohelp.eu]
##  üìÖ 01/08/2019
##  üìå Information provided by MeteoAlarm, Burze, GDACS, DPC, INGV and USGS
##  üìÇ PATH IMAGE /config/www/hassiohelp/pkg_natural_events
##--------------------------------------------------------------------------------------------------|
## Strumento per visualizzare il raggio delle zone https://www.mapdevelopers.com/draw-circle-tool.php
## Centro Notifiche (AppDaemon Notifier): https://github.com/caiosweet/Package-Notification-HUB-AppDaemon/wiki
## Alelxa Sound Library TO Google. soundbank://soundlibrary/ >> REPLACE TO  >> https://d3qhmae9zx9eb.cloudfront.net/

homeassistant:
  customize:
    ############################################################################
    ## CUSTOMIZE NODE ANCHORS
    ############################################################################
    package.node_anchors:
      customize: &CUSTOMIZE
        package: "Natural_events"
        attribution: "Caio & Gianpi - hassiohelp.eu"
      package: &PACKAGE
        package: "Natural_events"
      version: &VERSION "2023.06.0"
      ##---------------------- IMPOSTAZIONI DEL PACKAGE ----------------------##
      ### Important! Make sure the editor doesn't change this formatting.
      ### ====>   DESCRIPTION: &ALIAS !secret parameter_of_secret    <====
      ## DEFAULT
      SCRIPT NOTIFICHE: &DEFAULT_SCRIPT !secret pkg_natural_events_script
      SERVIZIO NOTIFY: &DEFAULT_NOTIFY !secret pkg_natural_events_notify
      MEDIA PLAYER ALEXA: &DEFAULT_MEDIA_PLAYER_ALEXA !secret pkg_natural_events_alexa
      MEDIA PLAYER GOOGLE: &DEFAULT_MEDIA_PLAYER_GOOGLE !secret pkg_natural_events_google
      SERIVICE TTS: &DEFAULT_SERVICE_TTS !secret pkg_natural_events_service_tts

      ## DND TTS (Orario Non Disturbare - Per lo script del package script.notify_hub presente in questo package)
      TTS PRIMA CHE INIZIA DND: &DEFAULT_DND_START !secret pkg_natural_events_dnd_start
      TTS DOPO CHE FINISCE DND: &DEFAULT_DND_STOP !secret pkg_natural_events_dnd_stop

      ## FOLDER DOWLOADS [Se la cambi, ricorda di farlo anche in lovelace!]
      DOWNLOAD DIRECTORY: &DEFAULT_DOWNLOAD_DIR !secret pkg_natural_events_download_dir

      ## CONFIGURATION
      LATITUDINE DI CASA: &CONF_LATITUDE !secret pkg_natural_events_latitude_home
      LONGITUDINE DI CASA: &CONF_LONGITUDE !secret pkg_natural_events_longitude_home
      RAGGIO ZONA GEOALERT (metri): &CONF_RADIUS_GEOALERT !secret pkg_natural_events_radius_geoalert
      RAGGIO ZONA METEOALERT (metri): &CONF_RADIUS_METEOALERT !secret pkg_natural_events_radius_meteoalert
      MAGNITUDO INGV minimo: &CONF_MAGNITUDE !secret pkg_natural_events_magnitude
      RAGGIO INGV (km): &CONF_RADIUS_QUAKE !secret pkg_natural_events_radius_quake
      REGIONE METEOALARM: &CONF_METEOALARM_REGION !secret pkg_natural_events_meteoalarm_region
      API KEY BURZE: &CONF_BURZE_API_KEY !secret pkg_natural_events_burze_api_key
      RAGGIO BURZE (km): &CONF_RADIUS_BURZE !secret pkg_natural_events_radius_burze
      ##---------------------- FINE IMPOSTAZIONI PACKAGE ---------------------##

      ##----------------------- START OF HELP SETTINGS -----------------------##
      DEFAULT_MOBILE_APP_ICON_2: &DEFAULT_MOBILE_APP_ICON_2 "https://hassiohelp.eu/wp-content/uploads/2021/05/icon_forum-750x750-full.png"
      DEFAULT_MOBILE_APP_ICON_1: &DEFAULT_MOBILE_APP_ICON_1 "https://hassiohelp.eu/wp-content/uploads/2021/05/icon_site-750x750-full.png"
      # "https://hassiohelp.eu/wp-content/uploads/2019/03/hassiohelp-192.png"

      CARDINAL:
        &CARDINAL {
          "N": "Nord",
          "NNE": "Nord-Nord Est",
          "NE": "Nord Est",
          "ENE": "Este-Nord Est",
          "E": "Est",
          "ESE": "Est-Sud Est",
          "SE": "Sud Est",
          "SSE": "Sud-Sud Est",
          "S": "Sud",
          "SSW": "Sud-Sud Ovest",
          "SW": "Sud Ovest",
          "WSW": "Ovest-Sud Ovest",
          "W": "Ovest",
          "WNW": "Ovest-Nord Ovest",
          "NW": "Nord Ovest",
          "NNW": "Nord-Nord Ovest",
        }

      METEOALARM_SIGN: &METEOALARM_SIGN
        0:
          icon: "‚ùå"
          text: "Nessun Avviso"
          alexa_sound: <audio src="soundbank://soundlibrary/musical/amzn_sfx_test_tone_01"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/musical/amzn_sfx_test_tone_01.mp3"
        1:
          icon: "üö©"
          text: "Vento"
          alexa_sound: <audio src="soundbank://soundlibrary/weather/wind/wind_10"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/weather/wind/wind_10.mp3"
        2:
          icon: "üßä"
          text: "Neve-Ghiaccio"
          alexa_sound: <audio src="soundbank://soundlibrary/footsteps/snow/snow_06"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/footsteps/snow/snow_06.mp3"
        3:
          icon: "‚ö°‚õà"
          text: "Temporali"
          alexa_sound: <audio src="soundbank://soundlibrary/weather/thunder/thunder_01"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/weather/thunder/thunder_01.mp3"
        4:
          icon: "üå´"
          text: "Nebbia"
          alexa_sound: <audio src="soundbank://soundlibrary/alarms/air_horns/air_horns_01"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/alarms/air_horns/air_horns_01.mp3"
        5:
          icon: "ü•µ"
          text: "Temperature massime estreme"
          alexa_sound: <audio src="soundbank://soundlibrary/human/amzn_sfx_drinking_slurp_01"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/human/amzn_sfx_drinking_slurp_01.mp3"
        6:
          icon: "ü•∂"
          text: "Temperature minime estreme"
          alexa_sound: <audio src="soundbank://soundlibrary/human/amzn_sfx_sneeze_01"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/human/amzn_sfx_sneeze_01.mp3"
        7:
          icon: "‚öìüèñ"
          text: "Eventi Costieri"
          alexa_sound: <audio src="soundbank://soundlibrary/boats_ships/anchors/anchor_01"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/boats_ships/anchors/anchor_01.mp3"
        8:
          icon: "üî•üå≤"
          text: "Incendi bischivi"
          alexa_sound: <audio src="soundbank://soundlibrary/home/amzn_sfx_fireplace_crackle_03"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/home/amzn_sfx_fireplace_crackle_03.mp3"
        9:
          icon: "‚õÑ"
          text: "Valanghe"
          alexa_sound: <audio src="soundbank://soundlibrary/ice_snow/ski/ski_01"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/ice_snow/ski/ski_01.mp3"
        10:
          icon: "‚òîüåß"
          text: "Pioggia"
          alexa_sound: <audio src="soundbank://soundlibrary/nature/amzn_sfx_rain_01"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/nature/amzn_sfx_rain_01.mp3"
        11:
          icon: "‚ùå"
          text: "Non disponibile"
          alexa_sound: <audio src="soundbank://soundlibrary/alarms/beeps_and_bloops/tone_02"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/alarms/beeps_and_bloops/tone_02.mp3"
        12:
          icon: "üåä"
          text: "Alluvione"
          alexa_sound: <audio src="soundbank://soundlibrary/nature/amzn_sfx_oars_splashing_rowboat_01"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/nature/amzn_sfx_oars_splashing_rowboat_01.mp3"
        13:
          icon: "üíßüåä"
          text: "Pioggia-Alluvione"
          alexa_sound: <audio src="soundbank://soundlibrary/weather/rain/rain_08"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/weather/rain/rain_08.mp3"

      NUMBER_ICONS:
        &NUMBER_ICONS {
          "0": "0Ô∏è‚É£",
          "1": "1Ô∏è‚É£",
          "2": "2Ô∏è‚É£",
          "3": "3Ô∏è‚É£",
          "4": "4Ô∏è‚É£",
          "5": "5Ô∏è‚É£",
          "6": "6Ô∏è‚É£",
          "7": "7Ô∏è‚É£",
          "8": "8Ô∏è‚É£",
          "9": "9Ô∏è‚É£",
        }

      WARNING_SIGN: &WARNING_SIGN
        0:
          icon_color: "‚ö™"
          text: "Valutazione non trasmessa"
          decimal_color: 16777215
          hex_color: "#FFFFFF"
        1:
          icon_color: "üü¢"
          text: "Verde"
          decimal_color: 3381555
          hex_color: "#339933"
        2:
          icon_color: "üü°"
          text: "Gialla"
          decimal_color: 16776960
          hex_color: "#FFFF00"
        3:
          icon_color: "üü†"
          text: "Arancione"
          decimal_color: 16753920
          hex_color: "#FFA500"
        4:
          icon_color: "üî¥"
          text: "Rossa"
          decimal_color: 16711680
          hex_color: "#FF0000"
        5:
          icon_color: "üü£üè¥‚Äç‚ò†Ô∏è"
          text: "Massima"
          decimal_color: 10502399
          hex_color: "#A040FF"

      WEEKDAYS: &WEEKDAYS
        - Domenica
        - Luned√¨
        - Marted√¨
        - Mercoled√¨
        - Gioved√¨
        - Venerd√¨
        - Sabato
      ##------------------------ END OF HELP SETTINGS ------------------------##

    ## Automation
    automation.natural_events_blitzortung_lightning_notifications:
      <<: *CUSTOMIZE
      friendly_name: "Blitzortung Notifiche"
    automation.natural_events_burze_notifications:
      <<: *CUSTOMIZE
      friendly_name: "Burze Notifiche"
    automation.natural_events_gdacs_notifications:
      <<: *CUSTOMIZE
      friendly_name: "Gdacs Notifiche"
    automation.natural_events_meteoalarm_notifications:
      <<: *CUSTOMIZE
      friendly_name: "MeteoAlarm Notifiche"
    automation.natural_events_protezione_civile_notifications:
      <<: *CUSTOMIZE
      friendly_name: "DPC Notifiche BinarySensor"
    automation.natural_events_protezione_civile_notifications_criticita_sensor:
      <<: *CUSTOMIZE
      friendly_name: "DPC Notifiche Criticit√†"
    automation.natural_events_protezione_civile_notifications_vigilance_sensor:
      <<: *CUSTOMIZE
      friendly_name: "DPC Notifiche Vigilanza"
    automation.natural_events_quake_ingv_notifications:
      <<: *CUSTOMIZE
      friendly_name: "INGV Notifiche"
    automation.natural_events_quake_usgs_notifications:
      <<: *CUSTOMIZE
      friendly_name: "USGS Notifiche"
    ## Binary Sensor
    binary_sensor.burze_storms_nearby:
      <<: *PACKAGE
      friendly_name: "Temporale nelle vicinanze"
      device_class: vibration
    binary_sensor.download_file:
      <<: *CUSTOMIZE
      friendly_name: Download File
      icon: mdi:link
    binary_sensor.global_natural_alert:
      <<: *CUSTOMIZE
    binary_sensor.lastquake:
      <<: *CUSTOMIZE
      friendly_name: Scossa Terremoto
      icon: mdi:pulse
    binary_sensor.meteoalarm:
      <<: *PACKAGE
      friendly_name: MeteoAlarm
    binary_sensor.natural_events_meteoalert:
      <<: *PACKAGE
    ## Group
    group.geoalert:
      <<: *CUSTOMIZE
      friendly_name: "Allerta Geologica"
      icon: mdi:earth
    group.meteoalert:
      <<: *CUSTOMIZE
      friendly_name: "Allerta Meteo"
      icon: mdi:weather-lightning-rainy
    group.natural_events:
      <<: *CUSTOMIZE
      friendly_name: "Eventi Naturali"
      icon: mdi:location-enter
    ## Input
    input_boolean.natural_events:
      <<: *CUSTOMIZE
      friendly_name: "Info e Impostazioni"
      icon: mdi:cogs
    input_boolean.natural_events_send_image:
      <<: *CUSTOMIZE
      friendly_name: "Invia Immagini"
      icon: mdi:image
    input_select.geo_map:
      <<: *CUSTOMIZE
      friendly_name: Geo Map
      icon: mdi:earth-box
    input_select.meteo_iframe:
      <<: *CUSTOMIZE
      friendly_name: Iframe Map
      icon: mdi:image-frame
    input_select.meteo_map:
      <<: *CUSTOMIZE
      friendly_name: Meteo Map
      icon: mdi:tooltip-image
    input_text.ingv_path_image:
      <<: *CUSTOMIZE
      friendly_name: Ingv path-image automatico (non toccare)
    ## Sensor
    sensor.meteoalarm_level:
      <<: *CUSTOMIZE
      friendly_name: "MeteoAlarm Level"
    sensor.meteoalarm_type:
      <<: *CUSTOMIZE
      friendly_name: "MeteoAlarm Type"
    ## Script
    script.notify_hub:
      <<: *CUSTOMIZE
      friendly_name: Mini Centro Notifiche
      icon: mdi:account-tie
    ## Zone
    zone.geoalert:
      <<: *CUSTOMIZE
      friendly_name: Zona Allerta Geologica
      icon: mdi:radiobox-marked
    zone.meteoalert:
      <<: *CUSTOMIZE
      friendly_name: Zona Allerta Meteo
      icon: mdi:lightning-bolt-circle

  #######################################-######################################
  ##                              CUSTOMIZE GLOB
  #######################################-######################################
  customize_glob:
    automation.natural_events_*:
      <<: *CUSTOMIZE
      icon: mdi:alpha-a-circle-outline

#######################################-########################################
##                                 COMPONENT
#######################################-########################################
#-------------------------------------
# DPC Configuration in Integration UI (Only)
# Info https://github.com/caiosweet/Home-Assistant-custom-components-DPC-Alert
#-------------------------------------

#-------------------------------------
# GDACS Configuration in Integration UI
# Info https://www.home-assistant.io/integrations/gdacs/
#-------------------------------------
# gdacs:
#   categories:
#     - Drought
#     - Earthquake
#   radius: 1000
#   latitude: *CONF_LATITUDE
#   longitude: *CONF_LONGITUDE

#-------------------------------------
# GEO LOCATION info https://www.home-assistant.io/components/geo_location/
#-------------------------------------
geo_location:
  - platform: usgs_earthquakes_feed
    feed_type: "past_day_all_earthquakes"
    radius: *CONF_RADIUS_QUAKE
    minimum_magnitude: *CONF_MAGNITUDE
    latitude: *CONF_LATITUDE
    longitude: *CONF_LONGITUDE

#-------------------------------------
# INGV Configuration in Integration UI o by new config yaml (see below)
# info https://github.com/caiosweet/Home-Assistant-custom-components-INGV
#-------------------------------------
# ingv_centro_nazionale_terremoti:
#     location: "Home"
#     radius: *CONF_RADIUS_QUAKE
#     minimum_magnitude: *CONF_MAGNITUDE
#     latitude: *CONF_LATITUDE
#     longitude: *CONF_LONGITUDE
#     start_time: 24

#-------------------------------------
# ZONE
#-------------------------------------
zone:
  - name: geoalert
    latitude: *CONF_LATITUDE
    longitude: *CONF_LONGITUDE
    radius: *CONF_RADIUS_GEOALERT
    passive: true
  - name: meteoalert
    latitude: *CONF_LATITUDE
    longitude: *CONF_LONGITUDE
    radius: *CONF_RADIUS_METEOALERT
    passive: true

#######################################-########################################
##                                   INPUT
#######################################-########################################
input_select:
  geo_map:
    options:
      - Posizione Geografica
      - Nessuna
  meteo_map:
    options:
      - Temperatura Nuvole Infrared
      - Nuvole Infrared
      - Nuvole e Sole
      - Pioggia
      - Neve
      - Il Meteo
      - Burze
      - Burze Nord Ovest
      - Burze Nord Est
      - Burze Sud Ovest
      - Burze Sud Est
      - WWLLN
      - Nessuna
  meteo_iframe:
    options:
      - Windy Alert
      - AM Ita
      - DPC Radar
      - DPC Bollettino Criticit√†
      - DPC Vigilanza Meteo
      - EUMET
      - Blitzortung
      - Radareu
      - Volcanodiscovery
      - Nessuna
input_boolean:
  natural_events:
  natural_events_send_image:
input_text:
  ingv_path_image:
    max: 255

#######################################-########################################
##                                   GROUP
#######################################-########################################
group:
  natural_events:
    entities:
      - group.meteoalert
      - group.geoalert
  meteoalert:
    entities:
      - binary_sensor.meteoalarm
      - binary_sensor.burze_storms_nearby
      - binary_sensor.dpc_temporali_oggi
      - binary_sensor.dpc_temporali_domani
      - binary_sensor.natural_events_meteoalert
  geoalert:
    entities:
      - binary_sensor.lastquake
      - binary_sensor.dpc_idraulico_domani
      - binary_sensor.dpc_idraulico_oggi
      - binary_sensor.dpc_idrogeologico_domani
      - binary_sensor.dpc_idrogeologico_oggi

#######################################-########################################
##                               BINARY SENSOR
#######################################-########################################
binary_sensor:
  #-------------------------------------
  # BURZE
  # info https://github.com/PiotrMachowski/Home-Assistant-custom-components-Burze.dzis.net
  #-------------------------------------
  - platform: burze_dzis_net
    latitude: *CONF_LATITUDE
    longitude: *CONF_LONGITUDE
    api_key: *CONF_BURZE_API_KEY
    name: burze
    storms_nearby:
      radius: *CONF_RADIUS_BURZE
  #-------------------------------------
  # METEOALARM INTEGRATION
  # info https://www.home-assistant.io/components/meteoalarm/
  #-------------------------------------
  - platform: meteoalarm
    name: meteoalarm
    country: "italy"
    province: *CONF_METEOALARM_REGION
    language: "it"

  #-------------------------------------
  # LAST QUAKE DOWNLOAD FILE
  #-------------------------------------
## Nuova configurazione command_line dalla versione 2023.06.0 https://www.home-assistant.io/integrations/command_line
command_line:
  - binary_sensor:
      name: download_file # shakemap
      device_class: connectivity
      command: >
        local=$(echo "{{ states('input_text.ingv_path_image') }}" | cut -d" " -f1);
        remote=$(echo "{{ states('input_text.ingv_path_image') }}" | cut -d" " -f2);
        rm -f "$local";
        curl -sSf -Lk -m 5 "$remote" --create-dirs -o "$local" &&
        echo "ON" || echo "OFF"
      scan_interval: 525600 # 1 year
      value_template: "{{ value }}"

  # - platform: command_line # check URL and download
  #   name: download_file # shakemap
  #   device_class: connectivity
  #   command: >
  #     local=$(echo "{{ states('input_text.ingv_path_image') }}" | cut -d" " -f1);
  #     remote=$(echo "{{ states('input_text.ingv_path_image') }}" | cut -d" " -f2);
  #     rm -f "$local";
  #     curl -sSf -Lk -m 5 "$remote" --create-dirs -o "$local" &&
  #     echo "ON" || echo "OFF"
  #   scan_interval: 525600 # 1 year
  #   value_template: "{{ value }}"

#######################################-########################################
##                                 TEMPLATE
#######################################-########################################
template:
  - trigger:
      - platform: geo_location
        source: "ingv_centro_nazionale_terremoti"
        zone: zone.geoalert
        event: enter
      - platform: geo_location
        source: "ingv_centro_nazionale_terremoti"
        zone: zone.geoalert
        event: leave
      - platform: state
        entity_id: sensor.date
      - platform: event
        event_type: automation_reloaded
      - platform: event
        event_type: event_template_reloaded
    binary_sensor:
      #-------------------------------------
      # LAST QUAKE TEST
      #-------------------------------------
      - name: "LastQuake"
        unique_id: lastquake
        device_class: vibration
        availability: >-
          {{expand(integration_entities("ingv_centro_nazionale_terremoti")) | length > 0}}
        state: >-
          {% set pub_date = states.geo_location
            | selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
            | sort(reverse=true, attribute='attributes.publication_date')
            | map(attribute='attributes.publication_date') | first | default %}
          {{ False if not pub_date else (utcnow() < ((pub_date) + timedelta(hours = 12))) }}
        attributes:
          distance: >-
            {{states.geo_location|selectattr('attributes.source','defined')|selectattr('attributes.source','match','ingv_')
              |sort(attribute='attributes.publication_date')|map(attribute='state')|list|last|default('unknown') }}
          lat: >-
            {{states.geo_location|selectattr('attributes.source','defined')|selectattr('attributes.source','match','ingv_')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.latitude')|list|last|default(0)}}
          long: >-
            {{states.geo_location|selectattr('attributes.source','defined')|selectattr('attributes.source','match','ingv_')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.longitude')|list|last|default(0)}}
          region: >-
            {{states.geo_location|selectattr('attributes.source','defined')|selectattr('attributes.source','match','ingv_')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.region')|list|last|default('unknown')}}
          magnitude: >-
            {{states.geo_location|selectattr('attributes.source','defined')|selectattr('attributes.source','match','ingv_')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.magnitude')|list|last|default(0)}}
          depth: >-
            {{states.geo_location|selectattr('attributes.source','defined')|selectattr('attributes.source','match','ingv_')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.depth')|list|last|default(0)}}
          publication_date: >-
            {{states.geo_location|selectattr('attributes.source','defined')|selectattr('attributes.source','match','ingv_')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.publication_date')|list|last|default('unknown')}}
          event_id: >-
            {{states.geo_location|selectattr('attributes.source','defined')|selectattr('attributes.source','match','ingv_')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.event_id')|list|last|default('unknown')}}
          image_url: >-
            {{states.geo_location|selectattr('attributes.source','defined')|selectattr('attributes.source','match','ingv_')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.image_url')|list|last|default('')}}
          level: >-
            {% set m = states.geo_location|selectattr('attributes.source','defined')|selectattr('attributes.source','match','ingv_')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.magnitude')|list|last|default(0) %}
              {% if 0 <= m < 2 %}0{% elif 2 <= m < 3 %}1{% elif 3 <= m < 4 %}2{% elif 4 <= m < 6 %}3{% else %}4{% endif %}

  - binary_sensor:
      - name: Natural events meteoalert
        unique_id: natural_events_meteoalert
        device_class: safety
        # availability_template: False
        state: >
          {% set phenomena = expand(integration_entities("dpc")) |select('search', 'phenomena') 
            |map(attribute='attributes.total_phenomena')|list | max | default(0) %}
          {% set alert = expand(integration_entities("dpc")) |select('search', 'alerts') 
            |map(attribute='attributes.total_alerts')|list | max | default(0) %}
          {% set binary = expand(integration_entities("dpc"))
            |selectattr('entity_id', 'search', 'temporali')
            |selectattr('state', '==', 'on')|list |length > 0 %}
          {{ ((phenomena + alert) > 0) or binary }}

      #-------------------------------------
      # GLOBAL NATURAL ALERT PACKAGE
      #-------------------------------------
      - name: Global Natural Alert
        unique_id: global_natural_alert
        device_class: safety
        # availability_template: False
        state: >
          {{ is_state('group.natural_events', 'on') 
            or this.attributes.my_sensors | default(false) }}
        attributes:
          my_sensors: >-
            {% set phenomena = expand(integration_entities("dpc")) |select('search', 'total_phenomena') 
            |map(attribute='attributes.total_phenomena')|list | max | default(0) %}
            {% set alert = expand(integration_entities("dpc")) |select('search', 'total_alerts') 
            |map(attribute='attributes.total_alerts')|list | max | default(0) %}
            {{ (phenomena + alert) > 0 }}
          burze_direction: >-
            {% set direction = state_attr('binary_sensor.burze_storms_nearby', 'direction') %}
            {% set cardinal = {
              'N':'Nord',
              'NE':'Nord Est',
              'E':'Est',
              'SE':'Sud Est',
              'S':'Sud',
              'SW':'Sud Ovest',
              'W':'Ovest',
              'NW':'Nord Ovest', } %}
            {{ cardinal[direction] if direction in cardinal else direction }}
          burze_direction_icon: >-
            {% set direction = state_attr('binary_sensor.burze_storms_nearby', 'direction') %}
            {% set cardinal = {
              'N':'arrow-up',
              'NE':'arrow-top-right',
              'E':'arrow-left',
              'SE':'arrow-bottom-right',
              'S':'arrow-down',
              'SW':'arrow-bottom-left',
              'W':'arrow-left',
              'NW':'arrow-top-left', } %}
            mdi:{{ cardinal[direction] if direction in cardinal else 'arrow-left-right' }}-bold-outline
          meteoalarm_type: >-
            {% set type = state_attr('binary_sensor.meteoalarm', 'awareness_type') %}
            {% set warning_texts = [
              'Nessun Avviso',
              'Vento','Neve-Ghiaccio',
              'Temporali','Nebbia',
              'Temperature massime estreme',
              'Temperature minime estreme',
              'Eventi Costieri',
              'Incendi boschivi',
              'Valanghe','Pioggia',
              'Non disponibile',
              'Alluvione',
              'Pioggia-Alluvione'] %}
            {{ 'Non disponibile' if type is none else warning_texts[type.split(';')[0]|int(0)] }}
          meteoalarm_type_icon: >-
            {% set type = state_attr('binary_sensor.meteoalarm', 'awareness_type') %}
            {% set warning_icons = {
              0  : "shield-outline",
              1  : "weather-windy",
              2  : "snowflake-alert",
              3  : "weather-lightning",
              4  : "weather-fog",
              5  : "thermometer-plus",
              6  : "thermometer-minus",
              7  : "sailing",
              8  : "fire",
              9  : "shovel",
              10 : "weather-pouring",
              11 : "help-circle",
              12 : "waves",
              13 : "home-flood", } %}
            {{ 'mdi:help-circle' if type is none else 'mdi:' ~ warning_icons[type.split(';')[0]|int(0)]}}
          meteoalarm_level: >
            {% set level = state_attr('binary_sensor.meteoalarm', 'awareness_level') %}
            {{ 'White' if level is none else level.split(';')[1]|title |replace('Yellow', 'Gold')}}
          meteoalarm_level_icon: >
            {% set level = state_attr('binary_sensor.meteoalarm','awareness_level') %}
            {{'mdi:numeric-0-box' if level is none else 'mdi:numeric-' ~ level.split(';')[0] ~ '-box'}}
          code: >- #Code color
            {% set color_codes = {'White':'0','Green':'1','Yellow':'2','Orange':'3','Red':'4'} %}
            {% set ma_level = state_attr('binary_sensor.meteoalarm','awareness_level') %}
            {% set lev1 = '0' if not ma_level else ma_level.split(';')[0] %}
            {% set lev2 = expand('group.natural_events')
              | selectattr("attributes.level", 'defined') 
              | rejectattr("state", '!=', 'on')
              | join(', ', attribute='attributes.level')|default('0', True)|max %}
            {% set lev3 =  expand(integration_entities("dpc"))
              | selectattr("attributes.max_level", 'defined')
              | join(', ', attribute='attributes.max_level')|default('0', True)|max %}
            {% set lev_color = [lev1,lev2,lev3]|max %}
            {{ lev_color|max }}
          icon: >- #Icon code color
            {% set lev_color = this.attributes.get('code', 0) %}
            mdi:numeric-{{ lev_color }}-box
          level: >- #Text color
            {% set lev_color = this.attributes.get('code', 0) %}
            {% set color_texts = {0:'White', 1:'Green', 2:'Gold', 3:'Orange', 4:'Red'} %}
            {{ color_texts.get(lev_color) }}
  - trigger:
      - platform: state
        entity_id: binary_sensor.global_natural_alert
    sensor:
      #-------------------------------------
      # SENSOR FOR CARD PICTURE ELEMENTS
      #-------------------------------------
      - name: meteoalarm type
        unique_id: meteoalarm_type
        state: "{{ state_attr('binary_sensor.global_natural_alert', 'meteoalarm_type') }}"
        icon: "{{ state_attr('binary_sensor.global_natural_alert', 'meteoalarm_type_icon') }}"
      - name: meteoalarm level
        unique_id: meteoalarm_level
        state: "{{ state_attr('binary_sensor.global_natural_alert', 'meteoalarm_level') }}"
        icon: "{{ state_attr('binary_sensor.global_natural_alert', 'meteoalarm_level_icon') }}"

#######################################-########################################
##                                 AUTOMATION
#######################################-########################################
automation:
  #----------------------------------------------------------------------------------------------------#
  # BLITZORTUNG - Notifica caduti fulmini nel raggio impostato nell'integrazione
  #----------------------------------------------------------------------------------------------------#
  - alias: "natural_events_blitzortung_lightning_notifications"
    # initial_state: true
    mode: single
    trigger:
      - platform: state
        entity_id: sensor.blitzortung_lightning_counter
    condition:
      - "{{ (as_timestamp(now()) - as_timestamp(this.attributes.last_triggered) ) > 60 }}"
      - condition: numeric_state
        entity_id: sensor.blitzortung_lightning_counter
        above: 0
    action:
      - service: *DEFAULT_SCRIPT
        data:
          title: "Lightning Warning!"
          message: &mess_lightning >
            Un fulmine √® stato rilevato entro 
            {{ states('sensor.blitzortung_lightning_distance') | default }} km da casa.
          alexa:
            # mode: false
            message: *mess_lightning
  #----------------------------------------------------------------------------------------------------#
  # BURZE.NET Notifica caduti fulmini nel raggio impostato in radius_meteoalert
  #----------------------------------------------------------------------------------------------------#
  - alias: natural_events_burze_notifications
    # initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.burze_storms_nearby
    condition: >
      {{ trigger.to_state.state == 'on' and (trigger.from_state.state == 'off' 
      or trigger.to_state.attributes.distance < trigger.from_state.attributes.distance) }}
    variables:
      NUMBER_ICONS: *NUMBER_ICONS
      WARNING_SIGN: *WARNING_SIGN
      attr: "{{ states.binary_sensor.burze_storms_nearby.attributes if trigger.to_state is defined else ({}) }}"
      direction: "{{ state_attr('binary_sensor.global_natural_alert','burze_direction')|default('Nord',true) }}"
      radius: "{{ (state_attr('zone.meteoalert','radius') //1000)|int(0) }}"
      burze_tts_msg: >-
        {% if trigger.from_state is defined and trigger.from_state.state == 'off' %}
        Probabile arrivo di un temporale da {{ direction }}. 
        {% else %} Aggiornamento Temporale. Il fulmine pi√π vicino √® stato rilevato a {{ attr.get('distance','0') }} km 
        a {{ direction }} da casa. {% endif %}
    action:
      - service: *DEFAULT_SCRIPT
        data:
          call_no_annuncio: 1
          title: >-
            Burze ‚ÜØ {% if trigger.from_state is defined and trigger.from_state.state == 'off' %} 
            {{ trigger.to_state.attributes.friendly_name }}.
            {% else %} AGGIORNAMENTO TEMPORALE. {% endif %}
          message: >-
            {% set n = attr.get('number', 0) %}
            {% set d = attr.get('distance')|default(radius,'0') %}
            {% macro range_distance() %} {% if d <= 0.5 %}5{% elif 0.5 < d <= 1 %}4{% elif 1 < d <= 5 %}3
            {% elif 5 < d <= 10 %}2{% elif 10 < d <= 20 %}1{% else %}0{% endif %} {% endmacro %}
            {{WARNING_SIGN.get(range_distance()|int(0)).icon_color}} Negli ultimi {{attr.get('period',0)}} minuti
            {% for x in n|string %} {{NUMBER_ICONS[x]|default(x)}}{% endfor %}‚ö°{% if n != 1 %}
            scariche di fulmini {% else %} fulmine scaricato {% endif %} nel raggio di {{radius}} km. 
            La scarica pi√π vicina √® avvenuta a {{attr.get('distance', 0)}} km a {{direction}} da casa.
          alexa:
            # mode: false
            message: "{{ burze_tts_msg }}"
          google:
            # mode: false
            message: "{{ burze_tts_msg }}"
          image: >-
            {% if trigger.from_state is defined and trigger.from_state.state == 'off' 
            and is_state('input_boolean.natural_events_send_image', 'on') %}
            /config/www/hassiohelp/pkg_natural_events/burze.png{% else %}{% endif %}
  
  #----------------------------------------------------------------------------------------------------#
  # DPC - PROTEZIONE CIVILE - Notifica criticit√† meteo-idro Sensor
  #----------------------------------------------------------------------------------------------------#
  - alias: natural_events_protezione_civile_notifications_criticita_sensor
    mode: queued
    max_exceeded: silent
    # initial_state: true
    trigger:
      - platform: state
        entity_id:
          - sensor.dpc_alert
    condition:
      - "{{ trigger.from_state.state not in ['unavailable','unknown'] }}"
      - or:
          - "{{ trigger.from_state.attributes.total_alerts != trigger.to_state.attributes.total_alerts }}"
          - and:
              - "{{ trigger.to_state.attributes.id != trigger.from_state.attributes.id }}"
              - "{{ trigger.to_state.attributes.total_alerts > 0 }}"
    action:
      - variables:
          WARNING_SIGN: *WARNING_SIGN
          BULLETIN: "https://mappe.protezionecivile.gov.it/it/mappe-rischi/bollettino-di-criticita"
          WARN_DPC:
            {
              none: "‚ùå",
              "Temporali": "‚ö°",
              "Idraulico": "üíß",
              "Idrogeologico": "üåä",
            }
          ENTITY: "{{ trigger.entity_id |default('sensor.dpc_alert', true) }}"
          DAYS: { 1: "today", 2: "tomorrow" }
          GIORNI: { 1: "oggi", 2: "domani" }
      - repeat:
          while:
            - "{{ repeat.index <= DAYS|length }}"
          sequence:
            - variables:
                giorno: "{{ GIORNI[repeat.index] }}"
                day: "{{ DAYS[repeat.index] }}"
                event: "{{ 'events_' + day }}"
            - if: "{{ state_attr(ENTITY, event) is not none }}"
              then:
                - service: *DEFAULT_SCRIPT
                  data:
                    call_no_annuncio: 1
                    title: "DPC Criticit√†"
                    message: |
                      {% set attr = state_attr(ENTITY, event) %}
                      Criticit√† per {{giorno}}
                      {%- for d in attr %}
                      {{WARNING_SIGN[d['level']].icon_color}} {{ WARN_DPC[d['risk']] }} {{ d['info'] }} {{ d['alert'] }} per rischio {{ d['risk'] }}.
                      {%- endfor %}
                      Zona: {{ state_attr(ENTITY, 'zone_name') }}
                    alexa:
                      # mode: false
                      message: &dpc_criticita_tts_msg >-
                        {%- set attr = state_attr(ENTITY, event) %}
                        Protezione Civile, bollettino di criticit√† per {{giorno}},
                        {%- for d in attr %}
                        {{ d['info'] }} {{ d['alert'] }}, per rischio {{ d['risk'] }},
                        {%- endfor %}
                      audio: soundbank://soundlibrary/weather/thunder/thunder_11
                    google:
                      # mode: false
                      message: *dpc_criticita_tts_msg
                      audio: "https://d3qhmae9zx9eb.cloudfront.net/nature/amzn_sfx_rain_01.mp3"
                    image: >
                      {% if is_state('input_boolean.natural_events_send_image', 'on') %}
                      {{ state_attr(ENTITY, day).image_url |default("", true) }}
                      {% endif %}
                    link: >
                      [Bollettino di criticit√†]({{ BULLETIN }})
                    level: >
                      {{ state_attr(ENTITY, day)['level'] |int(0)}}

  #----------------------------------------------------------------------------------------------------#
  # DPC - PROTEZIONE CIVILE - Notifica Vigilanza Meteo Sensor
  #----------------------------------------------------------------------------------------------------#
  - alias: natural_events_protezione_civile_notifications_vigilance_sensor
    mode: queued
    max_exceeded: silent
    # initial_state: true
    trigger:
      - platform: state
        entity_id:
          - sensor.dpc_vigilance
    condition:
      - "{{ trigger.from_state.state not in ['unavailable','unknown'] }}"
      - or:
          - "{{ trigger.from_state.attributes.total_alerts != trigger.to_state.attributes.total_alerts }}"
          - and:
              - "{{ trigger.to_state.attributes.id != trigger.from_state.attributes.id }}"
              - or:
                  - "{{ trigger.to_state.attributes.total_phenomena > 0 }}"
                  - "{{ trigger.to_state.attributes.total_alerts > 0 }}"
    action:
      - variables:
          BULLETIN: "https://mappe.protezionecivile.gov.it/it/mappe-rischi/bollettino-di-vigilanza"
          CARDINAL: *CARDINAL
          WARNING_SIGN: *WARNING_SIGN
          ENTITY: "{{ trigger.entity_id |default('sensor.dpc_vigilance', true) }}"
          DAYS: { 1: "today", 2: "tomorrow", 3: "aftertomorrow" }
          GIORNI: { 1: "oggi", 2: "domani", 3: "dopodomani" }
      - repeat:
          while:
            - "{{ repeat.index <= DAYS|length }}"
          sequence:
            - variables:
                giorno: "{{ GIORNI[repeat.index] }}"
                day: "{{ DAYS[repeat.index] }}"
            - if: "{{ state_attr(ENTITY, day) is not none
                and (state_attr(ENTITY, day)['level'] > 1
                or state_attr(ENTITY, day)['phenomena']|length > 0) }}"
              then:
                - service: *DEFAULT_SCRIPT
                  data:
                    call_no_annuncio: 1
                    title: "DPC Vigilanza Meteo"
                    message: |
                      {% set attr = state_attr(ENTITY, day) %}
                      Vigilanza meteo per {{giorno}}
                      {{WARNING_SIGN[attr['level']].icon_color}} Quantitativi previsti {{attr['precipitation']}}
                      {% if attr.phenomena|length > 0 %}
                      Fenomeni nelle vicinanze:
                      {% for p in attr['phenomena'] %}
                      ‚û°Ô∏è {{p.event}}: {{p.value}} in direzione {{CARDINAL[p.direction]}} alla distanza di {{p.distance}}km.
                      {% endfor %}
                      {% endif %}
                      Zona: {{ state_attr(ENTITY, 'zone_name') }}
                    alexa:
                      # mode: false
                      message: &dpc_vigilance_tts_msg >- 
                        {% if repeat.index == DAYS|length %}
                          Vigilanza meteo, 
                            {%- for day in DAYS.values() %}
                              {% set v = state_attr(ENTITY, day) %}
                              {%- if v and (v.level > 1 or v.phenomena|length > 0) %}
                                per {{ GIORNI[loop.index] }}, 
                                {% if v.level > 1 %}
                                  Quantitativi previsti {{ v['precipitation'] }}.
                                {% endif %}
                                {% if v.phenomena|length > 0 %}
                                  Fenomeni nelle vicinanze:
                                  {% for p in v['phenomena'] %}
                                    {{p.event}} {{p.value}} in direzione {{CARDINAL[p.direction]}} a circa {{p.distance}}km,
                                  {% endfor %}
                                {% endif %}
                              {%- endif %}
                            {%- endfor %}
                        {% endif %}
                      audio: soundbank://soundlibrary/nature/amzn_sfx_rain_01
                    google:
                      # mode: false
                      message: *dpc_vigilance_tts_msg
                      audio: "https://d3qhmae9zx9eb.cloudfront.net/nature/amzn_sfx_rain_01.mp3"
                    image: >
                      {% if is_state('input_boolean.natural_events_send_image', 'on') %}
                      {{ state_attr(ENTITY, day).image_url |default("", true) }}
                      {% endif %}
                    link: >
                      [Bollettino di vigilanza]({{ BULLETIN }})
                    level: >
                      {{ state_attr(ENTITY, day)['level'] |int(0)}}

  #----------------------------------------------------------------------------------------------------#
  # DPC - PROTEZIONE CIVILE - Notifica criticit√† meteo-idro Binary Sensor
  #----------------------------------------------------------------------------------------------------#
  - alias: natural_events_protezione_civile_notifications
    mode: queued
    max_exceeded: silent
    # initial_state: true
    trigger:
      - platform: state
        entity_id:
          - binary_sensor.dpc_idrogeologico_oggi
          - binary_sensor.dpc_idraulico_oggi
          - binary_sensor.dpc_temporali_oggi
          - binary_sensor.dpc_idrogeologico_domani
          - binary_sensor.dpc_idraulico_domani
          - binary_sensor.dpc_temporali_domani
    condition: >-
      {{ trigger.to_state.state == 'on'
          and not trigger.from_state.state in ["unavailable","unknown"]
          and (trigger.from_state.state == 'off' 
            or (trigger.to_state.attributes.id != trigger.from_state.attributes.id)) }}
    action:
      - variables:
          WARNING_SIGN: *WARNING_SIGN
          BULLETIN: "https://mappe.protezionecivile.gov.it/it/mappe-rischi/bollettino-di-criticita"
          PREVIEW: "https://raw.githubusercontent.com/pcm-dpc/DPC-Bollettini-Criticita-Idrogeologica-Idraulica/master/files/preview/{}_{}.png"
          dpc_tts_msg: >-
            {% set attr = trigger.to_state.attributes if trigger.to_state is defined else ({}) %}
            Attenzione. {{attr.get('friendly_name', 'Test DPC')}}. 
            {{attr.get('info', 'Nessuna info')}}. {{attr.get('alert', 'Valutazione non trasmessa')}}
      - service: *DEFAULT_SCRIPT
        data:
          call_no_annuncio: 1
          title: >-
            {% set attr = trigger.to_state.attributes if trigger.to_state is defined else ({}) %}
            Protezione Civile - {{attr.get('risk', 'Test DPC')}}
            {% if trigger.from_state is defined and trigger.from_state.state == 'on' %} - Revisione {% endif %}
          message: |
            {% set attr = trigger.to_state.attributes if trigger.to_state is defined else ({}) %}
            {% set warn = {none: '‚ùå', 'Temporali':'‚ö°', 'Idraulico':'üíß', 'Idrogeologico':'üåä'} %}
            {{warn[attr.get('risk')]}} {{attr.get('friendly_name', 'Test DPC')}}. 
            {{WARNING_SIGN[attr.get('level', 0)].icon_color}} {{attr.get('info', 'Nessuna info')}} 
            {{attr.get('alert' ,'Valutazione non trasmessa')}}
          alexa:
            # mode: false
            message: "{{dpc_tts_msg}}"
            audio: soundbank://soundlibrary/weather/thunder/thunder_11
          google:
            # mode: false
            message: "{{dpc_tts_msg}}"
            audio: "https://d3qhmae9zx9eb.cloudfront.net/weather/thunder/thunder_11.mp3"
          link: >
            {% set attr = trigger.to_state.attributes if trigger.to_state is defined else ({}) %}
            [Bollettino di criticit√†]({{attr.get('link', BULLETIN)}})
          level: >
            {% set attr = trigger.to_state.attributes if trigger.to_state is defined else ({}) %}
            {{attr.get('level', 0)}}
          image: >
            {% if is_state('input_boolean.natural_events_send_image', 'on') %}
            {% set attr = trigger.to_state.attributes if trigger.to_state is defined else ({}) %}
            {{attr.get('image_url', PREVIEW.format('20210702_1500', 'domani'))}}
            {% endif %}

  #----------------------------------------------------------------------------------------------------#
  # METEOALARM - Notifica criticit√† meteo nella regione impostata - Vedi tabella a fine package
  #----------------------------------------------------------------------------------------------------#
  - alias: natural_events_meteoalarm_notifications
    mode: queued
    # initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.meteoalarm
    condition: >-
      {{ trigger.to_state.state == 'on' and (trigger.from_state.state == 'off' 
      or trigger.to_state.attributes != trigger.from_state.attributes) }}
    variables:
      METEOALARM_SIGN: *METEOALARM_SIGN
      WARNING_SIGN: *WARNING_SIGN
      WEEKDAYS: *WEEKDAYS
      attr: "{{states.binary_sensor.meteoalarm.attributes if trigger.to_state is defined else ({}) }}"
      day: "{{as_timestamp(attr.get('onset', now()))|timestamp_custom('%w', true)|int(0)}}"
      level: "{{attr.get('awareness_level')|regex_replace(find='(\\D)')|int(0)}}" #|regex_replace(find="[^\d][^;]*")|int(0)
      type: "{{attr.get('awareness_type')|regex_replace(find='(\\D)')|int(0)}}" #|regex_replace(find="[^\d][^;]*")|int(0)
      meteoalarm_tts_msg: >
        {{("oh no! ", "accipicchia! ", "accidenti! ", "attenzione! ", "come non detto! ") |random }}
        per {{WEEKDAYS[day]}}, {{attr.get('headline','Test Intestazione')}}, 
        {{attr.get('description', 'Test Descrizione').split('(DISCLAIMER')[0]}}
    action:
      - service: *DEFAULT_SCRIPT
        data:
          call_no_annuncio: 1
          title: >-
            {{METEOALARM_SIGN[type].icon}} MeteoAlarm - {% if trigger.from_state is defined and trigger.from_state.state == 'off' %}
            {{ attr.get('urgency')}}.{% else %}Revisione.{% endif %}
          message: |
            Per {{WEEKDAYS[day]}}
            {{WARNING_SIGN[level].icon_color}} {{(METEOALARM_SIGN[type].text)|upper}}. Allerta {{WARNING_SIGN[level].text}}
            Descrizione: {{attr.get('description','Test Descrizione').split('(DISCLAIMER')[0]}}
            {{as_timestamp(attr.get('effective'))|timestamp_custom('Valido dalle ore %H:%M del %d/%m')|default(now(),true)}}
            {{as_timestamp(attr.get('expires'))|timestamp_custom(' alle ore %H:%M del %d/%m')|default(now(),true)}}
          image: >-
            {% if is_state('input_boolean.natural_events_send_image', 'on') %}
            {{'/config/www/hassiohelp/pkg_natural_events/meteoalarm_{}.png'.format(type)}}{% else %}
            {% endif %}
          alexa:
            # mode: false
            message: "{{meteoalarm_tts_msg}}"
            audio: "{{METEOALARM_SIGN[type].alexa_sound}}"
          google:
            # mode: false
            message: "{{meteoalarm_tts_msg}}"
            audio: "{{METEOALARM_SIGN[type].google_sound}}"
          level: "{{level}}"

  #----------------------------------------------------------------------------------------------------#
  # GEO LOCATION - Notifica Terremoti
  #----------------------------------------------------------------------------------------------------#
  # INGV
  - alias: natural_events_quake_ingv_notifications
    mode: queued
    max_exceeded: silent
    # initial_state: true
    trigger:
      - platform: geo_location
        source: ingv_centro_nazionale_terremoti
        zone: zone.geoalert
        event: enter
    condition:
      - "{{ utcnow() < (trigger.to_state.attributes.publication_date + timedelta(hours = 1.5)) }}"
    action:
      - variables:
          WARNING_SIGN: *WARNING_SIGN
          DOWNLOAD_DIR: *DEFAULT_DOWNLOAD_DIR
          image_url: "{{trigger.to_state.attributes.image_url|default}}"
          level: >-
            {% set m = trigger.to_state.attributes.magnitude %}
            {% macro magnitude() %}
            {%if 0<=m<=1.9%}0{%elif 2<=m<=2.9%}1{%elif 3<=m<=3.9%}2{%elif 4<=m<=5.9%}3{%else%}4{%endif%}
            {% endmacro %} {{ magnitude()|int(0)}}
          quake_tts_msg: >-
            Rilevato terremoto a {{trigger.to_state.state}} km,
            di magnitudo {{trigger.to_state.attributes.magnitude}},
            con epicentro {{trigger.to_state.attributes.region}},
            ad una profondit√† di {{trigger.to_state.attributes.depth}} km.
      # NOTIFICATION WITHOUT IMAGE
      - service: *DEFAULT_SCRIPT
        data:
          call_no_annuncio: 1
          title: >-
            üöß{{ WARNING_SIGN.get(level).icon_color }} INGV.
          message: |
            Rilevato terremoto a una distanza di {{trigger.to_state.state}} Km da casa.
            Magnitudo: {{trigger.to_state.attributes.magnitude}} 
            Epicentro: {{trigger.to_state.attributes.region}}
            Profondit√†: {{trigger.to_state.attributes.depth}} km.
            {% set data_utc = trigger.to_state.attributes.publication_date %}
            {{ as_timestamp(data_utc)|timestamp_custom('%H:%M:%S - %d/%m/%Y') }}
            {% set state_dict = {'home': 'casa', 'not_home': 'fuori casa', 'unknown': '‚ùì'} %}
            {%- for person in expand(states.person)|sort(attribute='name') %}
            {% if 'latitude' in person.attributes and person.attributes.latitude is not none %}
            {% set distanza = distance(trigger.entity_id, person.entity_id) %}
            {{"üìç{} ({}) a circa {} km dall'epicentro.".format(person.name|upper, state_dict.get(person.state, person.state), distanza|round(1)) }}
            {% else %}
            {{"üîπ{} ({})".format(person.name|upper, state_dict.get(person.state, person.state)) }}
            {% endif %}
            {% endfor -%}
          link: >
            [Dati Evento](http://terremoti.ingv.it/event/{{trigger.to_state.attributes.event_id}})
          alexa:
            # mode: false
            message: "{{quake_tts_msg}}"
            audio: <audio src="soundbank://soundlibrary/nature/amzn_sfx_earthquake_rumble_02"/>
          google:
            # mode: false
            message: "{{quake_tts_msg}}"
            audio: "https://d3qhmae9zx9eb.cloudfront.net/nature/amzn_sfx_earthquake_rumble_02.mp3"
          level: "{{level}}"
      # TRY DOWNLOAD IMAGE FOR xx TIME IF IMAGE URL EXISTS
      - alias: Download image
        choose:
          - alias: Check if url exists and download the file
            conditions: "{{ image_url|length > 0 }}" #{{trigger.to_state.attributes.magnitude >= 3}}"
            sequence:
              - service: input_text.set_value
                target:
                  entity_id: input_text.ingv_path_image
                data:
                  value: >-
                    {{DOWNLOAD_DIR}}lastquake.jpg {{image_url}}
              - repeat:
                  sequence:
                    - service: homeassistant.update_entity
                      entity_id: binary_sensor.download_file
                    - wait_for_trigger:
                        - platform: state
                          entity_id: binary_sensor.download_file
                          to: "on"
                      timeout: "00:00:20" #TODO DYNAMIC TIME
                  until: "{{ is_state('binary_sensor.download_file', 'on') or repeat.index >= 30 }}"
              - alias: Send Image
                choose:
                  - alias: If successful check
                    conditions: >
                      {{ image_url|length > 0 and is_state('binary_sensor.download_file', 'on') }}
                    sequence:
                      - service: *DEFAULT_SCRIPT
                        data:
                          call_no_annuncio: true
                          title: >
                            ‚úÖ{{ WARNING_SIGN.get(level).icon_color }} 
                            INGV. ‚ìÇ {{ trigger.to_state.attributes.magnitude }} 
                            üìê {{ trigger.to_state.state }} km
                          message: |
                            Epicentro: {{ trigger.to_state.attributes.region }}
                            Profondit√†: {{ trigger.to_state.attributes.depth }} km
                            {% set data_utc = trigger.to_state.attributes.publication_date %}
                            {{ as_timestamp(data_utc)|timestamp_custom('%H:%M:%S - %d/%m/%Y') }}
                          link: >
                            [Compila il Questionario](https://www.hsit.it/xml-server.php?item=quest&action=compile&event_id={{trigger.to_state.attributes.event_id}})
                          image: >
                            {% if is_state('input_boolean.natural_events_send_image', 'on') %} 
                            {{ DOWNLOAD_DIR }}lastquake.jpg
                            {% endif %}
                          level: "{{ level }}"
  # USGS
  - alias: natural_events_quake_usgs_notifications
    mode: queued
    max_exceeded: silent
    # initial_state: true
    trigger:
      - platform: geo_location
        source: usgs_earthquakes_feed
        zone: zone.geoalert
        event: enter
    condition: >
      {{((as_timestamp(utcnow())-as_timestamp(trigger.to_state.attributes.time))/3600*60)|int(0)< 90}}
    action:
      - variables:
          level: >-
            {% set m = trigger.to_state.attributes.magnitude %}
            {% macro magnitude() %}
            {% if 0<=m<2 %}0{% elif 2<=m<3 %}1{% elif 3<=m<4 %}2{% elif 4<=m<6 %}3{% else %}4{% endif %}
            {% endmacro %} {{ magnitude()|int(0)}}
          WARNING_SIGN: *WARNING_SIGN
          usgs_tts_msg: >-
            Evento sismico a {{trigger.to_state.state}} km.
            Epicentro {{trigger.to_state.attributes.place}}.
            Magnitudo {{trigger.to_state.attributes.magnitude}}.
      - service: *DEFAULT_SCRIPT
        data:
          call_no_annuncio: 1
          title: >-
            üöß{{ WARNING_SIGN.get(level).icon_color }} USGS - Evento sismico. {{trigger.to_state.attributes.status}}
          message: >-
            {% set data_utc = trigger.to_state.attributes.time %}
            Evento sismico di magnitudo: {{trigger.to_state.attributes.magnitude}} 
            a una distanza di {{ trigger.to_state.state }} Km da casa. 
            Epicentro: {{trigger.to_state.attributes.place}}
            {{as_timestamp(data_utc)|timestamp_custom ('Data %d/%m/%Y Ore %H:%M:%S')}}
          link: >-
            [LINK MAPPE](https://earthquake.usgs.gov/earthquakes/eventpage/{{trigger.to_state.attributes.external_id}}/executive)
          alexa:
            # mode: false
            message: "{{usgs_tts_msg}}"
            audio: soundbank://soundlibrary/backgrounds_ambience/volcano_earthquake/volcano_earthquake_03
            wait_time: 4
          google:
            # mode: false
            message: "{{usgs_tts_msg}}"
            audio: "https://d3qhmae9zx9eb.cloudfront.net/backgrounds_ambience/volcano_earthquake/volcano_earthquake_03.mp3"
          level: "{{level}}"

  #----------------------------------------------------------------------------------------------------#
  # GEO LOCATION - Notifica GDACS # Global Disaster Alert and Coordination System
  #----------------------------------------------------------------------------------------------------#
  - alias: natural_events_gdacs_notifications
    mode: queued
    max_exceeded: silent
    # initial_state: true
    trigger:
      - platform: geo_location
        source: gdacs
        zone: zone.geoalert
        event: enter
    condition:
      - "{{ (utcnow() < ((trigger.to_state.attributes.from_date)) + timedelta(hours = 24)) }}"
    action:
      - variables:
          WARNING_SIGN: *WARNING_SIGN
          color_codes:
            { "White": 0, "Green": 1, "Yellow": 2, "Orange": 3, "Red": 4 }
          event_type: "{{trigger.to_state.attributes.event_type}}"
          alert_level: "{{trigger.to_state.attributes.alert_level}}"
          level: "{{ color_codes[alert_level] }}"
          event:
            Earthquake: "Terremoto"
            Tropical Cyclone: "Ciclone tropicale"
            Flood: "Inondazione"
            Volcano: "Vulcano"
            Drought: "Siccit√†"
            Forest Fire: "Incendi boschivi"
          gdacs_tts_msg: >
            Avviso di disastro globale: {{event.get(event_type, event_type)}} con
            allerta {{WARNING_SIGN.get(level).text}} in {{trigger.to_state.attributes.country}}
      - service: *DEFAULT_SCRIPT
        data:
          call_no_annuncio: 1
          title: "{{WARNING_SIGN.get(level).icon_color}} GDACS: {{event.get(event_type, event_type)}}"
          message: |-
            Avviso di disastro globale: {{event.get(event_type, event_type)}}
            Allerta: {{trigger.to_state.attributes.severity}}
            Descrizione: {{trigger.to_state.attributes.description}}
            Nazioni: {{trigger.to_state.attributes.country}}

            Rilasciato: {{as_timestamp(trigger.to_state.attributes.from_date, false)|timestamp_custom("%d.%m.%Y %H:%M")}}
            Fine: {{as_timestamp(trigger.to_state.attributes.to_date, false)|timestamp_custom("%d.%m.%Y %H:%M")}}
            Settimane: {{trigger.to_state.attributes.duration_in_week}}
          alexa:
            # mode: false
            message: "{{gdacs_tts_msg}}"
          google:
            # mode: false
            message: "{{gdacs_tts_msg}}"
          level: "{{level}}"

#######################################-########################################
##                                  SCRIPT
#######################################-########################################
script:
  notify_hub:
    alias: Mini Notification Center
    description: "Cross-platform notification sorting center"
    fields:
      title:
        name: title
        description: "Il titolo della notifica"
        example: "Attenzione! Allarme inserito"
        default: "Attenzione! Allarme inserito"
        selector:
          text:
            multiline: true
      message:
        name: message
        description: "The message content"
        example: "Allerta bianca temporali oggi"
        default: "Allerta bianca temporali oggi."
        selector:
          text:
            multiline: true
      alexa:
        name: alexa
        description: "Parameter for TTS Alexa. Bool (True/Flase) or Dict (media_player, message, audio)"
        example: &ex_alexa |
          media_player: media_player.studio
          message: messaggio diverso per alexa
          audio: '<audio src="soundbank://soundlibrary/nature/amzn_sfx_earthquake_rumble_02"/>'
        default: *ex_alexa
        required: false
        selector:
          object:
      google:
        name: google
        description: "Parameter for TTS Google. Bool (True/Flase) or Dict (media_player, message, audio)"
        example: "true"
        default: false
        selector:
          boolean:
      notify:
        name: notify
        description: "Notify or more then one service notificstion (notify.telegram, notify.pushover, notify.pushbullt)"
        example: "notify.telegram"
        default: "notify.telegram"
        selector:
          text:
      image:
        name: image
        description: "Uri or Path to send remote or local image"
        example: "/config/www/hassiohelp/pkg_natural_events/burze.png"
        default: "https://hassiohelp.eu/wp-content/uploads/2020/11/Notifer-3.0-00-2-2048x1451.jpg"
        selector:
          text:
      link:
        name: link
        description: "Un link da inserire nel messaggio. Se inserito in formato markdown [alias](uri link), dove previsto verr√† trasformato in alias cliccabile"
        example: "[Google](https://www.google.it/)"
        default: "[Google](https://www.google.it/)"
        selector:
          text:
      level:
        name: level
        description: "Colore livello di allerta. 0 bianco - 1 verde - 2 giallo - 3 arancione - 4 rosso - 5 viola"
        example: "1"
        default: 1
        selector:
          number:
            min: 0
            max: 5
            step: 1
    mode: queued
    max_exceeded: silent
    sequence:
      - variables:
          WARNING_SIGN: *WARNING_SIGN
          DEFAULT_NOTIFY: *DEFAULT_NOTIFY
          DEFAULT_MEDIA_PLAYER_ALEXA: *DEFAULT_MEDIA_PLAYER_ALEXA
          DEFAULT_MEDIA_PLAYER_GOOGLE: *DEFAULT_MEDIA_PLAYER_GOOGLE
          DEFAULT_MOBILE_APP_ICON_1: *DEFAULT_MOBILE_APP_ICON_1
          DEFAULT_MOBILE_APP_ICON_2: *DEFAULT_MOBILE_APP_ICON_2
          DEFAULT_SERVICE_TTS_GOOGLE: *DEFAULT_SERVICE_TTS
          INVALIDATE: [false, null, "", none, "none", "null"]
          level: "{{ level|default(0) |int(0) }}"
          color: "{{ color|default(WARNING_SIGN[level]) }}"
          notify_service: >-
            {% set DEFAULT_NOTIFY = notify|default(DEFAULT_NOTIFY) %}
            {{ (DEFAULT_NOTIFY|replace('notify.','')|regex_replace(find=" *, *", replace=",")|lower).rsplit(",") 
            if DEFAULT_NOTIFY is string else DEFAULT_NOTIFY }}
          title: "{{ title|default }}"
          message:
            > # SUB_NOTIFICHE_WRAP = [(" +"," "),("\s\s+","\n")] # SUB_NOTIFICHE_NOWRAP = [("\s+"," "),(" +"," ")]
            {{ message|default|regex_replace(find=" +", replace=" ")|regex_replace(find="\s\s+", replace="\n") }}
          link: "{{ link|default }}"
          alexa_message: >
            {% if alexa is boolean %}
            {{ message if alexa }}
            {% elif alexa is defined and alexa is iterable %}
            {{ (alexa['message_tts'] if 'message_tts' in alexa 
                else alexa['message'] if 'message' in alexa)|default(message) }}
            {% endif %}
          google_message: >
            {% if google is boolean %}
            {{ message if google }}
            {% elif google is defined and google is iterable and not '' in google %}
            {{ (google['message_tts'] if 'message_tts' in google 
                else google['message'] if 'message' in google)|default(message) }}
            {% endif %}

      - parallel:
          - alias: PERSISTENT
            if:
              - "{{ message not in INVALIDATE }}"
              - "{{ states('input_boolean.notifier_screen_notifications') != 'off' }}"
            then:
              - service: persistent_notification.create
                data:
                  title: "Mini Centro Notifiche"
                  message: |
                    {% set timestamp = now().strftime("%H:%M:%S") %}
                    {% set old_message = state_attr('persistent_notification.mini_centro_notifiche','message') %}
                    {% set message = "{} - {}\n{}".format(timestamp,message,link) %}
                    {% set persistent_message = "{}\n{}".format(old_message,message) %}
                    {{ persistent_message if old_message is not none and old_message|length < 2000 else message }}
                  notification_id: "mini_centro_notifiche"

          - alias: NOTIFIER
            choose:
              - alias: IF DEFAULT NOTIFY VALIDATE
                conditions:
                  - "{{ DEFAULT_NOTIFY not in INVALIDATE }}"
                sequence:
                  - variables:
                      ### Split link from markdown format [alias](url)
                      link_uri: "{{ link|regex_replace(find='\\[.*\\]|[()]', replace='') }}"
                      link_alias: "{{ link|regex_replace(find='[()].*|\\]|\\[', replace='') }}"
                      word_regex_color:
                        "(magnitudo\\b|epicentro\\b|\\ballerta\\b|\\balert\\b
                        |\\bverde\\b|\\bgiall.\\b|\\barancione\\b|\\bross.\\b)"
                  - alias: NOTIFY IMAGE
                    choose:
                      - alias: IF IMAGE
                        conditions:
                          - "{{ image|default not in INVALIDATE }}"
                        sequence:
                          - variables:
                              is_local_file: "{{ true if not 'http' in image|default else false }}"
                          - alias: "REPEAT Image notify"
                            repeat:
                              while: "{{ repeat.index <= notify_service|length }}"
                              sequence:
                                - variables:
                                    notify_name: "{{ notify_service[repeat.index -1] |replace(' ','_') |lower }}"
                                - alias: FIND PLATFORM
                                  choose:
                                    - alias: DISCORD
                                      conditions: "{{ 'discord' in notify_name }}"
                                      sequence:
                                        - service: "notify.{{ notify_name }}"
                                          data:
                                            title: "{{ title }}"
                                            message: ""
                                            data:
                                              embed:
                                                title: "{{title}}"
                                                description: "{{ '\n{}\n\n{}'.format(message,link) }}"
                                                url: "{{link_uri}}"
                                                color: "{{ color.decimal_color }}"
                                                author:
                                                  name: "Mini Centro Notifiche üë®‚Äç‚úàÔ∏è"
                                                  url: "{{ image if not is_local_file }}"
                                                  icon_url: "{{image if not is_local_file else DEFAULT_MOBILE_APP_ICON_2 }}"
                                                thumbnail:
                                                  url: "{{image if not is_local_file else DEFAULT_MOBILE_APP_ICON_2 }}"
                                                footer:
                                                  text: "by HassioHelp"
                                                  icon_url: "{{DEFAULT_MOBILE_APP_ICON_1}}"
                                              images: "{{[image] if is_local_file else [] }}"
                                    - alias: MOBILE APP
                                      conditions: "{{ 'mobile_app' in notify_name }}"
                                      sequence:
                                        - service: "notify.{{ notify_name }}"
                                          data:
                                            title: "{{ title }}"
                                            message: "{{ message ~ '\n\n{}'.format(link_uri) }}"
                                            data:
                                              sticky: true
                                              clickAction: "{{ link_uri }}"
                                              url: "{{ link_uri }}"
                                              image: "{{ image|replace('config/www','local') }}"
                                    - alias: PUSHBULLET
                                      conditions: "{{ 'pushbullet' in notify_name }}"
                                      sequence:
                                        - service: "notify.{{ notify_name }}"
                                          data:
                                            title: "{{ title }}"
                                            message: "{{ '{}\n\n{}'.format(message,link_uri) }}"
                                            data:
                                              "{{ 'file' if is_local_file else 'file_url' }}": "{{ image }}"
                                    - alias: PUSHOVER
                                      conditions: "{{ 'pushover' in notify_name }}"
                                      sequence:
                                        - service: "notify.{{ notify_name }}"
                                          data:
                                            title: "{{ title }}"
                                            message: >
                                              {% set message = 'Image' if message in INVALIDATE else message %}
                                              {% set message_regex = message |regex_replace(find=word_regex_color, 
                                                replace='<font color="{}">{}</font>'.format(color.hex_color,"\\1"),
                                                ignorecase=True) %}
                                              {{ '{}\n\n<a href={}>{}</a>'.format(message_regex,link_uri,link_alias) }}
                                            data:
                                              "{{ 'attachment' if is_local_file else 'url' }}": "{{ image }}"
                                              url_title: "{{ 'Remote Image' if 'http' in image else '' }}"
                                              html: 1
                                              sound: "{{ sound|default('siren') }}"
                                    - alias: TELEGRAM
                                      conditions: "{{ 'telegram' in notify_name }}"
                                      sequence:
                                        - service: "notify.{{ notify_name }}"
                                          data:
                                            title: "{{ title }}"
                                            message: "{{message}}"
                                            data:
                                              photo:
                                                "{{ 'file' if is_local_file else 'url' }}": "{{ image }}"
                                                caption: "{{ title }}\n{{ message ~ '\n\n{}'.format(link) }}"
                                                timeout: 90
                                  default:
                                    - service: "notify.{{ notify_name }}"
                                      data:
                                        title: "{{ title }}"
                                        message: "{{'\n{}\n{}'.format(message,link_uri) }}"
                                        data: "{{ data|default({}) }}"
                  - alias: NOTIFY TEXT
                    choose:
                      - alias: IF MESSAGGE AND NOT URL OR FILE
                        conditions:
                          - "{{ message|length > 0 }}"
                          - "{{ image|default in INVALIDATE }}"
                        sequence:
                          - variables:
                              extra_discord:
                                embed:
                                  title: "{{ title }}"
                                  description: "{{ '\n{}\n\n{}'.format(message,link) }}"
                                  url: "{{ link_uri }}"
                                  color: "{{ color.decimal_color }}"
                                  author:
                                    name: "Mini Centro Notifiche üë®‚Äç‚úàÔ∏è"
                                    url: "{{ link_uri }}"
                                    icon_url: "{{ DEFAULT_MOBILE_APP_ICON_1 }}"
                                  thumbnail:
                                    url: "{{ DEFAULT_MOBILE_APP_ICON_1 }}"
                                  # fields:
                                  #   - name: "by HassioHelp"
                                  #     value: "{{ link_uri }}"
                                  footer:
                                    text: "by HassioHelp"
                                    icon_url: "{{ DEFAULT_MOBILE_APP_ICON_1 }}"
                              extra_mobile_app:
                                sticky: true
                                clickAction: "{{ link_uri }}"
                                url: "{{ link_uri }}"
                                color: "{{ color.hex_color }}"
                                ledColor: "{{ color.hex_color }}"
                                icon_url: "{{ icon|default(DEFAULT_MOBILE_APP_ICON_1) }}"
                              extra_pushbullet: { "url": "{{ link_uri }}" }
                              extra_pushover:
                                url: "{{ link_uri }}"
                                url_title: "{{ link_alias }}"
                                html: 1
                                sound: siren
                              extra_telegram: { "timeout": 90 }
                          - alias: "Repeat text notify"
                            repeat:
                              while: "{{ repeat.index <= notify_service|length }}"
                              sequence:
                                - variables:
                                    notify_name: "{{ notify_service[repeat.index -1] |replace(' ','_') |lower }}"
                                - service: "notify.{{ notify_name }}"
                                  data:
                                    title: "{{ title }}"
                                    message: >
                                      {% if 'discord' in notify_name %}
                                      {% elif 'telegram' in notify_name %}
                                        {{ message ~ '\n\n{}'.format(link) }}
                                      {% elif 'pushover' in notify_name %}
                                        {% set message_regex = message |regex_replace(find=word_regex_color, 
                                          replace='<font color="{}">{}</font>'.format(color.hex_color,"\\1"),
                                          ignorecase=True) %}
                                        {{ message_regex }}
                                      {% else %}
                                        {{ message }}
                                      {% endif %}
                                    data: >-
                                      {% if 'mobile_app' in notify_name %}
                                        {{ extra_mobile_app }}
                                      {% elif 'pushbullet' in notify_name %}
                                        {{ extra_pushbullet }}
                                      {% elif 'pushover' in notify_name %}
                                        {{ extra_pushover }}
                                      {% elif 'telegram' in notify_name %}
                                        {{ extra_telegram }}
                                      {% elif 'discord' in notify_name %}
                                        {{ extra_discord }}
                                      {% else %}
                                        {{ data|default({}) }}
                                      {% endif %}

          - alias: TTS MESSAGE
            choose:
              - alias: IF TIME AND AUDIO
                conditions:
                  - condition: time
                    after: *DEFAULT_DND_STOP
                    before: *DEFAULT_DND_START
                  - "{{ (DEFAULT_MEDIA_PLAYER_ALEXA not in INVALIDATE and alexa not in INVALIDATE) or
                    (DEFAULT_MEDIA_PLAYER_GOOGLE not in INVALIDATE and google not in INVALIDATE)}}"
                  - "{{states('binary_sensor.notifier_dnd') != 'on'}}"
                  # - "{{expand(states.person)|selectattr('state','eq','home')|list|count > 0}}"
                sequence:
                  - parallel:
                      - alias: TTS ALEXA
                        choose:
                          - alias: IF ALEXA
                            conditions:
                              - "{{ DEFAULT_MEDIA_PLAYER_ALEXA not in INVALIDATE and alexa_message|length > 0 }}"
                              - "{{ states('input_boolean.notifier_alexa_switch') != 'off' }}"
                            sequence:
                              - variables:
                                  alexa_sound: "{{alexa['audio']|default }}"
                                  alexa_sound_tag: >
                                    {% if not '<audio src=' in alexa_sound and alexa_sound %}
                                    {{ '<audio src="'+alexa_sound+'"/>' }}
                                    {% else %}{{alexa_sound}}{% endif %}
                                  alexa_players: >
                                    {{ (alexa['media_player'] if alexa['media_player'] is defined else DEFAULT_MEDIA_PLAYER_ALEXA)|lower }}
                                  message_tts: >-
                                    {{ alexa_message|regex_replace(find="\s+|_", replace=" ")|regex_replace(find="http\S+", replace="") }}
                              - service: notify.alexa_media
                                data:
                                  target: "{{alexa_players}}"
                                  message: "{{alexa_sound_tag + message_tts}}"
                                  data:
                                    type: tts

                      - alias: TTS GOOGLE
                        choose:
                          - alias: IF GOOGLE
                            conditions:
                              - "{{ DEFAULT_MEDIA_PLAYER_GOOGLE not in INVALIDATE and google_message|length > 0 }}"
                              - "{{ states('input_boolean.notifier_google_switch') != 'off' }}"
                            sequence:
                              - variables:
                                  google_sound: "{{google['audio']|default }}"
                                  google_players: >
                                    {% set entity = google['media_player'] if google['media_player'] is defined
                                      else DEFAULT_MEDIA_PLAYER_GOOGLE %}
                                    {{ expand((entity|regex_replace(find="\s+", replace="")).rsplit(",") 
                                      if entity is string else entity)|map(attribute='entity_id')|list }}
                                  message_tts: >-
                                    {{ google_message|regex_replace(find="\s+|_", replace=" ")|regex_replace(find="http\S+", replace="") }}
                              - alias: ADD SOUND TTS GOOGLE
                                choose:
                                  - alias: IF GOOGLE SOUND
                                    conditions: "{{google_sound|length > 1 }}"
                                    sequence:
                                      - service: media_player.play_media
                                        data:
                                          entity_id: "{{google_players}}"
                                          media_content_id: "{{google_sound}}"
                                          media_content_type: music
                                      - delay: "00:00:01"
                                      - delay:
                                          seconds: >
                                            {{expand(google_players)|selectattr('attributes.media_duration','defined')
                                            |map(attribute='attributes.media_duration')|list|first|default(7)|float}}
                              - service: >-
                                  {{ DEFAULT_SERVICE_TTS_GOOGLE if DEFAULT_SERVICE_TTS_GOOGLE not in INVALIDATE else 'tts.google_translate_say' }}
                                data:
                                  entity_id: "{{google_players}}"
                                  message: "{{message_tts}}"
                  - delay:
                      seconds: >-
                        {{ (alexa_message|wordcount, google_message|wordcount)
                            |max|default(message|wordcount, true) // 2
                            +(2 if alexa is boolean or not 'audio' in alexa|default else 9) }}

#######################################-########################################
##                                  LEGEND
#######################################-########################################
### METEOALARM
#### Awareness Types
# | Code | Type                      |
# |------|---------------------------|
# | 0    | No Warnings               | Nessun Avviso
# | 1    | Wind                      | Vento
# | 2    | Snow-Ice                  | Neve-Ghiaccio
# | 3    | Thunderstorm              | Temporali
# | 4    | Fog                       | Nebbia
# | 5    | Extreme High Temperatures | Temperature massime estreme
# | 6    | Extreme Low Temperatures  | Temperature minime estreme
# | 7    | Costal Event              | Eventi Costieri
# | 8    | Forest Fire               | Incendi bischivi
# | 9    | Avalanche                 | Valanghe
# | 10   | Rain                      | Pioggia
# | 11   | Unavailable               | Non disponibile
# | 12   | Flooding                  | Alluvione
# | 13   | Rain-Flooding             | Pioggia-Alluvione

#### Awareness Levels
# | Code | Level             |
# |------|-------------------|-------------------|
# | 0    | White/Unknown     | Bianco/Sconosciuto
# | 1    | Green/No Warnings | Verde/Nessun Avviso
# | 2    | Yellow            | Giallo
# | 3    | Orange            | Arancione
# | 4    | Red               | Rosso

## DIPARTIMENTO PROTEZIONE CIVILE LEGEND
# | Code | Level             | Criticit√†
# |------|-------------------|-------------------|
# | 0    | BIANCA            | Non disponibile
# | 1    | VERDE             | Nessun Avviso
# | 2    | GIALLA            | Ordinaria
# | 3    | ARANCIONE         | Moderata
# | 4    | ROSSA             | Elevata
#######################################-#######################################
##                                END PACKAGE
#######################################-#######################################

# ###########################################################
# ## EXAMPLE NATURAL EVENTS SECRETS FILE
# ###########################################################
# ## DEFAULT
# pkg_natural_events_script: "script.notify_hub"
# pkg_natural_events_notify: "telegram"
# pkg_natural_events_google: "media_player.red,media_player.black,media_player.black_due"
# pkg_natural_events_alexa: "media_player.sala,media_player.studio"
# pkg_natural_events_service_tts: "tts.google_translate_say"

# ## DND TTS (Orario Non Disturbare - Per script.notify_hub)
# pkg_natural_events_dnd_start: "23:00"
# pkg_natural_events_dnd_stop: "07:00"

# ## FOLDER DOWLOADS [Se la cambi, ricorda di farlo anche in lovelace!]
# pkg_natural_events_download_dir: "/config/www/hassiohelp/downloads/"

# ## CONFIGURATION
# pkg_natural_events_latitude_home: 41.9109
# pkg_natural_events_longitude_home: 12.4818
# pkg_natural_events_radius_geoalert: 1000000 # Metri
# pkg_natural_events_radius_meteoalert: 25000 # Metri
# pkg_natural_events_magnitude: 2.0
# pkg_natural_events_radius_quake: 1000 # Km
# pkg_natural_events_meteoalarm_region: "Lazio"
# pkg_natural_events_burze_api_key: "x123456789012xx12xxx12aa345bb6c67890d12e"
# pkg_natural_events_radius_burze: 25 # Km

# ###########################################################
# ## EXAMPLE NATURAL EVENTS SECRETS FILE TEMPLATE OR ENTITY
# ###########################################################
# ## DEFAULT
# pkg_natural_events_script: "{{states('input_select.centro_notifiche')}}"
# pkg_natural_events_notify: "{{states('input_select.notifier_text_notify')|lower}}"
# pkg_natural_events_google: "{{states('sensor.notifier_player_google')}}"
# pkg_natural_events_alexa: "{{states('sensor.notifier_player_alexa')}}"
# pkg_natural_events_service_tts: >
#   tts.{{states('input_select.notifier_tts_notify')|lower
#   |replace(' ','_')|replace('google','google_translate')
#   |replace('reverso','reversotts_say')|default('google_translate_say')}}

# ## DND TTS (Orario Non Disturbare - Per script.notify_hub
# pkg_natural_events_dnd_start: "input_datetime.dnd_start_weekdays"
# pkg_natural_events_dnd_stop: "input_datetime.dnd_end_weekdays"

# ## FOLDER DOWLOADS [Se la cambi, ricorda di farlo anche in lovelace!]
# pkg_natural_events_download_dir: "/config/www/hassiohelp/downloads/"

# ## CONFIGURATION
# pkg_natural_events_latitude_home: 41.9109
# pkg_natural_events_longitude_home: 12.4818
# pkg_natural_events_radius_geoalert: 1000000 # Metri
# pkg_natural_events_radius_meteoalert: 25000 # Metri
# pkg_natural_events_magnitude: 2.0
# pkg_natural_events_radius_quake: 1000 # Km
# pkg_natural_events_meteoalarm_region: "Lazio"
# pkg_natural_events_burze_api_key: "x123456789012xx12xxx12aa345bb6c67890d12e"
# pkg_natural_events_radius_burze: 25 # Km

# N.B
# pkg_natural_events_script: "{{states('input_select.centro_notifiche')}}"
# questo √® un selettore che mi sono creato io, per cambiare script al volo e testarli.

# input_select:
#   centro_notifiche:
#     options:
#       - script.my_notify
#       - script.notify_hub

# Se vuoi semplicemente utilizzare solo lo script del Centro notifiche, ovviamente va inserito in questo modo:
# pkg_natural_events_script: "script.my_notify"
