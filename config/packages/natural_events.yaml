## INFO üì¶ Natural_events
##  üòÖ Caio & Gianpi [hassiohelp.eu]
##  üìÖ 01/08/2019
##  üìå Information provided by MeteoAlarm, Burze, GDACS, DPC and INGV Italy
##  üìÇ PATH IMAGE /config/www/hassiohelp/pkg_natural_events
##--------------------------------------------------------------------------------------------------|
## DPC: per trovare il codice ISTAT: https://www.paginebianche.it/codice-istat
## METEOALARM: Cerca il nome della tua Regione o ID: http://meteoalarm.eu/it_IT/0/0/IT-Italia.html
## Strumento per visualizzare il raggio delle zone https://www.mapdevelopers.com/draw-circle-tool.php
## SSH & Web Terminal: per il check url e download immagine INGV https://github.com/hassio-addons/addon-ssh
## Centro Notifiche (AppDaemon Notifier): https://github.com/caiosweet/Package-Notification-HUB-AppDaemon/wiki

homeassistant:
  customize:
    ########################################################################
    ## CUSTOMIZE NODE ANCHORS
    ########################################################################
    package.node_anchors:
      ##--------------------- IMPOSTAZIONI DEL PACKAGE ---------------------##
      ## Se NON usi il secret, osserva l'esempio qui sotto.
      ## Esempio LATITUDINE per le zone: &latitude 41.9109
      SCRIPT centro notifiche: !secret &script pkg_natural_events_script
      SERVIZIO Notify: !secret &notify pkg_natural_events_notify
      MEDIA PLAYER Google: !secret &media_player_google pkg_natural_events_google
      MEDIA PLAYER Alexa: !secret &media_player_alexa pkg_natural_events_alexa
      ## Orario di riproduzione messaggi TTS (Per script.natural_events_notifications)
      DOPO LE: !secret &speaker_on_dnd_end pkg_natural_events_dnd_end
      PRIMA DELLE: !secret &speaker_off_dnd_start pkg_natural_events_dnd_start
      ## Cartella per downloads [Se la cambi, ricorda di farlo anche in lovelace!]
      DOWNLOAD DIRECTORY: !secret &download_dir pkg_natural_events_download_dir

      RAGGIO ZONA MeteoAlert metri: !secret &radius_meteoalert pkg_natural_events_radius_meteoalert
      RAGGIO ZONA GeoAlert metri: !secret &radius_geoalert pkg_natural_events_radius_geoalert
      RAGGIO TERREMOTO km: !secret &radius_quake pkg_natural_events_radius_quake
      MAGNITUDO minimo: !secret &magnitude pkg_natural_events_magnitude
      RAGGIO BURZE km: !secret &radius_burze pkg_natural_events_radius_burze

      LATITUDINE per le zone: !secret &latitude pkg_natural_events_latitude_home
      LONGITUDINE per le zone: !secret &longitude pkg_natural_events_longitude_home
      REGIONE MeteoAlarm: !secret &region pkg_natural_events_meteoalarm_regione
      ID Meteoalarm Custom: !secret &meteoalarm_custom_id pkg_natural_events_meteoalarm_custom_id
      ISTAT DPC: !secret &istat pkg_natural_events_istat
      API KEY Burze: !secret &burze_api_key pkg_natural_events_burze_api_key
      ##--------------------- FINE IMPOSTAZIONI PACKAGE ---------------------##

      ##------------------ IMPOSTAZIONI >inizio< VARIABILI ------------------##
      alert: &alert
        0:
          color: "‚ö™"
          text: "Bianca"
        1:
          color: "üü¢"
          text: "Verde"
        2:
          color: "üü°"
          text: "Gialla"
        3:
          color: "üü†"
          text: "Arancione"
        4:
          color: "üî¥"
          text: "Rossa"
        5:
          color: "üè¥‚Äç‚ò†Ô∏è"
          text: "Nera"

      days: &days
        - Domenica
        - Luned√¨
        - Marted√¨
        - Mercoled√¨
        - Gioved√¨
        - Venerd√¨
        - Sabato

      meteoalarm_type:
        &meteoalarm_type #https://d3qhmae9zx9eb.cloudfront.net/ al posto di soundbank://soundlibrary/
        0:
          icon: "‚ùå"
          text: "Nessun Avviso"
          alexa_sound: <audio src="soundbank://soundlibrary/musical/amzn_sfx_test_tone_01"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/musical/amzn_sfx_test_tone_01.mp3"
        1:
          icon: "üö©"
          text: "Vento"
          alexa_sound: <audio src="soundbank://soundlibrary/weather/wind/wind_10"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/weather/wind/wind_10.mp3"
        2:
          icon: "üßä"
          text: "Neve-Ghiaccio"
          alexa_sound: <audio src="soundbank://soundlibrary/footsteps/snow/snow_06"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/footsteps/snow/snow_06.mp3"
        3:
          icon: "‚ö°‚õà"
          text: "Temporali"
          alexa_sound: <audio src="soundbank://soundlibrary/weather/thunder/thunder_01"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/weather/thunder/thunder_01.mp3"
        4:
          icon: "üå´"
          text: "Nebbia"
          alexa_sound: <audio src="soundbank://soundlibrary/alarms/air_horns/air_horns_01"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/alarms/air_horns/air_horns_01.mp3"
        5:
          icon: "ü•µ"
          text: "Temperature massime estreme"
          alexa_sound: <audio src="soundbank://soundlibrary/human/amzn_sfx_drinking_slurp_01"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/human/amzn_sfx_drinking_slurp_01.mp3"
        6:
          icon: "ü•∂"
          text: "Temperature minime estreme"
          alexa_sound: <audio src="soundbank://soundlibrary/human/amzn_sfx_sneeze_01"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/human/amzn_sfx_sneeze_01.mp3"
        7:
          icon: "‚öìüèñ"
          text: "Eventi Costieri"
          alexa_sound: <audio src="soundbank://soundlibrary/boats_ships/anchors/anchor_01"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/boats_ships/anchors/anchor_01.mp3"
        8:
          icon: "üî•üå≤"
          text: "Incendi bischivi"
          alexa_sound: <audio src="soundbank://soundlibrary/home/amzn_sfx_fireplace_crackle_03"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/home/amzn_sfx_fireplace_crackle_03.mp3"
        9:
          icon: "‚õÑ"
          text: "Valanghe"
          alexa_sound: <audio src="soundbank://soundlibrary/ice_snow/ski/ski_01"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/ice_snow/ski/ski_01.mp3"
        10:
          icon: "‚òîüåß"
          text: "Pioggia"
          alexa_sound: <audio src="soundbank://soundlibrary/nature/amzn_sfx_rain_01"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/nature/amzn_sfx_rain_01.mp3"
        11:
          icon: "‚ùå"
          text: "Non disponibile"
          alexa_sound: <audio src="soundbank://soundlibrary/alarms/beeps_and_bloops/tone_02"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/alarms/beeps_and_bloops/tone_02.mp3"
        12:
          icon: "üåä"
          text: "Alluvione"
          alexa_sound: <audio src="soundbank://soundlibrary/nature/amzn_sfx_oars_splashing_rowboat_01"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/nature/amzn_sfx_oars_splashing_rowboat_01.mp3"
        13:
          icon: "üíßüåä"
          text: "Pioggia-Alluvione"
          alexa_sound: <audio src="soundbank://soundlibrary/weather/rain/rain_08"/>
          google_sound: "https://d3qhmae9zx9eb.cloudfront.net/weather/rain/rain_08.mp3"

      num:
        &num {
          "0": "0Ô∏è‚É£",
          "1": "1Ô∏è‚É£",
          "2": "2Ô∏è‚É£",
          "3": "3Ô∏è‚É£",
          "4": "4Ô∏è‚É£",
          "5": "5Ô∏è‚É£",
          "6": "6Ô∏è‚É£",
          "7": "7Ô∏è‚É£",
          "8": "8Ô∏è‚É£",
          "9": "9Ô∏è‚É£",
        }

      ##------------------ IMPOSTAZIONI > fine < VARIABILI ------------------##

      ############################################################################
      ##                               CUSTOMIZE
      ############################################################################
      customize: &customize
        package: "Natural_events üåç"
        site: "hassiohelp.eu üåê"
        author: "Caio & Gianpi"
        version: "2021.05.0"

    ## Automation
    automation.natural_events_burze_notifications:
      <<: *customize
      friendly_name: "Burze Notifiche"
    automation.natural_events_gdacs_notifications:
      <<: *customize
      friendly_name: "Gdacs Notifiche"
    automation.natural_events_meteoalarm_notifications:
      <<: *customize
      friendly_name: "MeteoAlarm Notifiche"
    automation.natural_events_meteoalarm_custom_notifications:
      <<: *customize
      friendly_name: "MeteoAlarm Custom Notifiche"
    automation.natural_events_protezione_civile_notifications:
      <<: *customize
      friendly_name: "DPC Notifiche"
    automation.natural_events_quake_ingv_notifications:
      <<: *customize
      friendly_name: "INGV Notifiche"
    automation.natural_events_quake_usgs_notifications:
      <<: *customize
      friendly_name: "USGS Notifiche"
    automation.natural_events_startup:
      <<: *customize
      friendly_name: "StartUp Natural events"
    ## Binary Sensor
    binary_sensor.global_natural_alert:
      <<: *customize
    binary_sensor.burze_storms_nearby:
      <<: *customize
      friendly_name: "Temporale nelle vicinanze"
      device_class: vibration
    binary_sensor.meteoalarm:
      <<: *customize
      friendly_name: MeteoAlarm
    binary_sensor.lastquake:
      <<: *customize
      friendly_name: Scossa Terremoto
      icon: mdi:pulse
    binary_sensor.check_url:
      <<: *customize
      friendly_name: Check URL
      icon: mdi:link
    ## Group
    group.natural_events:
      <<: *customize
      friendly_name: "Eventi Naturali"
      icon: mdi:location-enter
    group.geoalert:
      <<: *customize
      friendly_name: "Allerta Geologica"
      icon: mdi:earth
    group.meteoalert:
      <<: *customize
      friendly_name: "Allerta Meteo"
      icon: mdi:weather-lightning-rainy
    ## Input
    input_boolean.natural_events:
      <<: *customize
      friendly_name: "Info e Impostazioni"
      icon: mdi:cogs
    input_boolean.natural_events_send_image:
      <<: *customize
      friendly_name: "Invia Immagini"
      icon: mdi:image
    input_select.geo_map:
      <<: *customize
      friendly_name: Geo Map
      icon: mdi:earth-box
    input_select.meteo_iframe:
      <<: *customize
      friendly_name: Iframe Map
      icon: mdi:image-frame
    input_select.meteo_map:
      <<: *customize
      friendly_name: Meteo Map
      icon: mdi:tooltip-image
    ## Sensor
    sensor.meteoalarm_custom:
      <<: *customize
      friendly_name: "MeteoAlarm Custom"
      unit_of_measurement: eventi
    ## Script
    script.natural_events_notifications:
      <<: *customize
      friendly_name: Centro Notifiche
      icon: mdi:account-tie
    ## Zone
    zone.geoalert:
      <<: *customize
      friendly_name: Zona Allerta Geologica
      icon: mdi:radiobox-marked
    zone.meteoalert:
      <<: *customize
      friendly_name: Zona Allerta Meteo
      icon: mdi:flash-circle
  #######################################-#######################################
  ##                              CUSTOMIZE GLOB
  #######################################-#######################################
  customize_glob:
    automation.natural_events_*:
      <<: *customize
      icon: mdi:alpha-a-circle-outline
    binary_sensor.dpc_*:
      <<: *customize
    geo_location.drought*:
      <<: *customize
    geo_location.earthquake*:
      <<: *customize
    geo_location.flood*:
      <<: *customize
    geo_location.m_*:
      <<: *customize
    geo_location.tropical*:
      <<: *customize
    geo_location.volcano*:
      <<: *customize
    script.natural_events_*:
      <<: *customize
    sensor.gdacs*:
      <<: *customize
      friendly_name: GDACS
      unit_of_measurement: eventi

#######################################-#######################################
##                                 COMPONENT
#######################################-#######################################
#-------------------------------------
# GDACS info https://www.home-assistant.io/integrations/gdacs/
#-------------------------------------
gdacs:
  # categories: [Drought, Earthquake, Flood, Tropical Cyclone, Tsunami, Volcano]
  radius: *radius_quake
  latitude: *latitude
  longitude: *longitude
#-------------------------------------
# GEO LOCATION info https://www.home-assistant.io/components/geo_location/
# INGV info https://github.com/caiosweet/Home-Assistant-custom-components-INGV
#-------------------------------------
geo_location:
  - platform: ingv_centro_nazionale_terremoti
    radius: *radius_quake
    minimum_magnitude: *magnitude
    latitude: *latitude
    longitude: *longitude
  - platform: usgs_earthquakes_feed
    feed_type: "past_day_all_earthquakes"
    radius: *radius_quake
    minimum_magnitude: *magnitude
    latitude: *latitude
    longitude: *longitude
#-------------------------------------
# ZONE
#-------------------------------------
zone:
  - name: geoalert
    latitude: *latitude
    longitude: *longitude
    radius: *radius_geoalert
    passive: true
  - name: meteoalert
    latitude: *latitude
    longitude: *longitude
    radius: *radius_meteoalert
    passive: true
#######################################-#######################################
##                                   INPUT
#######################################-#######################################
input_select:
  geo_map:
    options:
      - Posizione Geografica
      - Nessuna
  meteo_map:
    options:
      - Temperatura Nuvole Infrared
      - Nuvole Infrared
      - Nuvole e Sole
      - Pioggia
      - Neve
      - Il Meteo
      - Burze
      - Burze Nord Ovest
      - Burze Nord Est
      - Burze Sud Ovest
      - Burze Sud Est
      - WWLLN
      - Nessuna
  meteo_iframe:
    options:
      - Windy Alert
      - Protezione Civile
      - Blitzortung
      - Radareu
      - Volcanodiscovery
      - Nessuna
input_boolean:
  natural_events:
  natural_events_send_image:
#######################################-#######################################
##                                   GROUP
#######################################-#######################################
group:
  natural_events:
    entities:
      - group.meteoalert
      - group.geoalert
  meteoalert:
    entities:
      - binary_sensor.meteoalarm
      - binary_sensor.burze_storms_nearby
      - binary_sensor.dpc_temporali_oggi
      - binary_sensor.dpc_temporali_domani
      - sensor.meteoalarm_custom
  geoalert:
    entities:
      - binary_sensor.lastquake
      - binary_sensor.dpc_idraulico_domani
      - binary_sensor.dpc_idraulico_oggi
      - binary_sensor.dpc_idrogeologico_domani
      - binary_sensor.dpc_idrogeologico_oggi
#######################################-#######################################
##                               BINARY SENSOR
#######################################-#######################################
binary_sensor:
  #-------------------------------------
  # DPC info https://github.com/caiosweet/Home-Assistant-custom-components-DPC-Alert
  #-------------------------------------
  - platform: dpc
    name: "dpc"
    istat: *istat
    warnings:
      - temporali_oggi
      - idraulico_oggi
      - idrogeologico_oggi
      - temporali_domani
      - idraulico_domani
      - idrogeologico_domani
    scan_interval: 900 # in seconds (default 1800 [30min])
  #-------------------------------------
  # BURZE info https://github.com/PiotrMachowski/Home-Assistant-custom-components-Burze.dzis.net
  #-------------------------------------
  - platform: burze_dzis_net
    latitude: *latitude
    longitude: *longitude
    api_key: *burze_api_key
    name: burze
    storms_nearby:
      radius: *radius_burze
  #-------------------------------------
  # METEOALARM INTEGRATION info https://www.home-assistant.io/components/meteoalarm/
  #-------------------------------------
  - platform: meteoalarm
    country: "IT"
    province: *region
    language: "it"
  #-------------------------------------
  # LAST QUAKE
  #-------------------------------------
  - platform: template
    sensors:
      lastquake:
        friendly_name: Evento terremoto
        device_class: vibration
        # availability_template: False
        value_template: >-
          {% set last_date = states.geo_location
            | selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
            | sort(attribute='attributes.publication_date')
            | map(attribute='attributes.publication_date') |list|last|default %}
          {{ ((as_timestamp(utcnow())-as_timestamp(last_date))/3600) <= 24 if last_date else False }}
        attribute_templates:
          distance: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='state')|list|last|default}}
          lat: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.latitude')|list|last|default}}
          long: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.longitude')|list|last|default}}
          title: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.title')|list|last|default}}
          region: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.region')|list|last|default}}
          magnitude: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.magnitude')|list|last|default}}
          publication_date: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.publication_date')|list|last|default}}
          event_id: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.event_id')|list|last|default}}
          image_url: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.image_url')|list|last|default}}
          attribution: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.attribution')|list|last|default}}
          level: >-
            {%set m = states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
              |sort(attribute='attributes.publication_date')|map(attribute='attributes.magnitude')|list|last|default(0)%}
              {% set m = m|float %}
              {%if 0<=m<=1.9%}0{%elif 2<=m<=2.9%}1{%elif 3<=m<=3.9%}2{%elif 4<=m<=5.9%}3{%else%}4{%endif%}
          external_id: >-
            {{states.geo_location|selectattr('attributes.source','eq','ingv_centro_nazionale_terremoti')
            |sort(attribute='attributes.publication_date')|map(attribute='attributes.external_id')|list|last|default|replace('smi:','')}}
  #-------------------------------------
  # GLOBAL NATURAL ALERT PACKAGE
  #-------------------------------------
  - platform: template
    sensors:
      global_natural_alert:
        # availability_template: False
        friendly_name: Eventi Naturali
        device_class: safety
        value_template: >
          {{is_state('group.natural_events', 'on') or not is_state('sensor.meteoalarm_custom', '0')}}
        attribute_templates:
          burze_direction: >-
            {% set cardinal = state_attr('binary_sensor.burze_storms_nearby', 'direction') %}
            {% set dict_direction = {
              'N':'Nord',
              'NE':'Nord Est',
              'E':'Est',
              'SE':'Sud Est',
              'S':'Sud',
              'SW':'Sud Ovest',
              'W':'Ovest',
              'NW':'Nord Ovest', } %}
            {{ dict_direction[cardinal] if cardinal in dict_direction else cardinal }}
          burze_direction_icon: >-
            {% set cardinal = state_attr('binary_sensor.burze_storms_nearby', 'direction') %}
            {% set dict_direction = {
              'N':'arrow-up',
              'NE':'arrow-top-right',
              'E':'arrow-left',
              'SE':'arrow-bottom-right',
              'S':'arrow-down',
              'SW':'arrow-bottom-left',
              'W':'arrow-left',
              'NW':'arrow-top-left', } %}
            mdi:{{ dict_direction[cardinal] if cardinal in dict_direction else 'arrow-left-right' }}-bold-outline
          meteoalarm_type: >-
            {% set list_type = ['Nessun Avviso','Vento','Neve-Ghiaccio','Temporali','Nebbia','Temperature massime estreme','Temperature minime estreme',
            'Eventi Costieri', 'Incendi boschivi','Valanghe','Pioggia','Non disponibile','Alluvione','Pioggia-Alluvione'] %}
            {% set type = state_attr('binary_sensor.meteoalarm', 'awareness_type') %}
            {{ 'Non disponibile' if type == none else list_type[type.split(';')[0]|int] }}
          meteoalarm_type_icon: >-
            {% set dict_type = {
            0  : "shield-outline",
            1  : "weather-windy",
            2  : "snowflake-alert",
            3  : "weather-lightning",
            4  : "weather-fog",
            5  : "thermometer-plus",
            6  : "thermometer-minus",
            7  : "sailing",
            8  : "fire",
            9  : "shovel",
            10 : "weather-pouring",
            11 : "help-circle",
            12 : "waves",
            13 : "home-flood", } %}
            {% set type = state_attr('binary_sensor.meteoalarm', 'awareness_type') %}
            {{ 'mdi:help-circle' if type == none else 'mdi:'~dict_type[type.split(';')[0]|int]}}
          meteoalarm_level: >
            {% set code_color = state_attr('binary_sensor.meteoalarm', 'awareness_level') %}
            {{ 'White' if code_color == none else code_color.split(';')[1]|title }}
          meteoalarm_level_icon: >
            {% set code = state_attr('binary_sensor.meteoalarm','awareness_level') %}
            {{'mdi:numeric-0-box' if code == none else 'mdi:numeric-'~code.split(';')[0]~'-box'}}
          level: >-
            {% set dict_color = {'0':'White', '1':'Green', '2':'Yellow', '3':'Orange', '4':'Red'} %}
            {% set dict_code = {'White':'0','Green':'1','Yellow':'2','Orange':'3','Red':'4'} %}
            {% set ma_level = state_attr('binary_sensor.meteoalarm','awareness_level') %}
            {% set lev1 = '0' if not ma_level else ma_level.split(';')[0] %}
            {% set lev2 = expand('group.natural_events')
              | selectattr("attributes.level", 'defined')
              | join(', ', attribute='attributes.level')|default('0', True)|max %}
            {% macro custom_code() %}
              {%- for s  in ['today', 'tomorrow'] if not is_state('sensor.meteoalarm_custom', '0') -%}
                {% set v = state_attr('sensor.meteoalarm_custom', s) -%}
                  {% if v -%}
                    {% for d in v -%}
                      {{dict_code[d['code']]}}
                    {% endfor -%}
                  {% endif -%}
              {%- endfor -%}
            {% endmacro -%}
            {% set lev3 = '0' if not custom_code() else custom_code() -%}
            {% set lev_color = [lev1,lev2,lev3]|max %}
            {{ dict_color.get(lev_color|max) }}
          code: >-
            {% set dict_code = {'White':'0','Green':'1','Yellow':'2','Orange':'3','Red':'4'} %}
            {% set ma_level = state_attr('binary_sensor.meteoalarm','awareness_level') %}
            {% set lev1 = '0' if not ma_level else ma_level.split(';')[0] %}
            {% set lev2 = expand('group.natural_events')
              | selectattr("attributes.level", 'defined')
              | join(', ', attribute='attributes.level')|default('0', True)|max %}
            {% macro custom_code() %}
              {%- for s  in ['today', 'tomorrow'] if not is_state('sensor.meteoalarm_custom', '0') -%}
                {% set v = state_attr('sensor.meteoalarm_custom', s) -%}
                  {% if v -%}
                    {% for d in v -%}
                      {{dict_code[d['code']]}}
                    {% endfor -%}
                  {% endif -%}
              {%- endfor -%}
            {% endmacro -%}
            {% set lev3 = '0' if not custom_code() else custom_code() -%}
            {% set lev_color = [lev1,lev2,lev3]|max %}
            {{ lev_color|max }}
          icon: >-
            {% set dict_code = {'White':'0','Green':'1','Yellow':'2','Orange':'3','Red':'4'} %}
            {% set ma_level = state_attr('binary_sensor.meteoalarm','awareness_level') %}
            {% set lev1 = '0' if not ma_level else ma_level.split(';')[0] %}
            {% set lev2 = expand('group.natural_events')
              | selectattr("attributes.level", 'defined')
              | join(', ', attribute='attributes.level')|default('0', True)|max %}
            {% macro custom_code() %}
              {%- for s  in ['today', 'tomorrow'] if not is_state('sensor.meteoalarm_custom', '0') -%}
                {% set v = state_attr('sensor.meteoalarm_custom', s) -%}
                  {% if v -%}
                    {% for d  in v -%}
                      {{dict_code[d['code']]}}
                    {% endfor -%}
                  {% endif -%}
              {%- endfor -%}
            {% endmacro -%}
            {% set lev3 = '0' if not custom_code() else custom_code() -%}
            {% set lev_color = [lev1,lev2,lev3]|max %}
            mdi:numeric-{{ lev_color|max }}-box
#######################################-#######################################
##                                  SENSOR
#######################################-#######################################
sensor:
  #-------------------------------------
  # METEOALARM_M CUASTOM COMPONENT info https://github.com/kodi1/meteoalarm
  #-------------------------------------
  - platform: meteoalarm_m
    id: *meteoalarm_custom_id
    name: meteoalarm_custom
    scan_interval: 1800
  #-------------------------------------
  # SENSOR FOR CARD PICTURE ELEMENTS
  #-------------------------------------
  - platform: template
    sensors:
      ## METEOALARM TEMPLATE TYPE SENSOR
      meteoalarm_type:
        friendly_name: Meteoalarm type
        value_template: >
          {{state_attr('binary_sensor.global_natural_alert', 'meteoalarm_type')}}
        icon_template: >
          {{state_attr('binary_sensor.global_natural_alert', 'meteoalarm_type_icon')}}
      ## METEOALARM TEMPLATE LEVEL SENSOR
      meteoalarm_level:
        friendly_name: Meteoalarm level
        value_template: >
          {{state_attr('binary_sensor.global_natural_alert', 'meteoalarm_level')}}
        icon_template: >
          {{state_attr('binary_sensor.global_natural_alert', 'meteoalarm_level_icon')}}
#######################################-#######################################
##                                 AUTOMATION
#######################################-#######################################
automation:
  #----------------------------------------------------------------------------------------------------#
  # START-UP - natural_events (Crea gruppo di tutti i binary sensor e aggiorna alcuni sensori all'avvio)
  #----------------------------------------------------------------------------------------------------#
  - alias: natural_events_startup
    initial_state: true
    trigger:
      - platform: homeassistant
        event: start
      - platform: event
        event_type: automation_reloaded
    action:
      # - delay: 00:00:15
      - service: group.set
        data:
          object_id: geoalert
          add_entities: >
            {{states.sensor|selectattr('name','==','GDACS')|join(',','entity_id')|lower}}
      - service: homeassistant.update_entity
        entity_id: binary_sensor.lastquake

  #----------------------------------------------------------------------------------------------------#
  # BURZE.NET Notifica caduti fulmini nel raggio impostato in radius_meteoalert
  #----------------------------------------------------------------------------------------------------#
  - alias: natural_events_burze_notifications
    initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.burze_storms_nearby
    condition: >
      {{ trigger.to_state.state == 'on' and (trigger.from_state.state == 'off' 
      or trigger.to_state.attributes.distance < trigger.from_state.attributes.distance )}}
    variables:
      num: *num
      alert: *alert
      radius: "{{(state_attr('zone.meteoalert','radius') //1000)|int}}"
      direction: "{{state_attr('binary_sensor.global_natural_alert','burze_direction')|default('Nord',true)}}"
      attr: "{{states.binary_sensor.burze_storms_nearby.attributes if trigger.to_state is defined else ({}) }}"
      burze_tts_msg: >-
        {% if trigger.from_state is defined and trigger.from_state.state == 'off' %}Probabile arrivo di un temporale da {{direction}}. 
        {% else %} Aggiornamento Temporale. Il fulmine pi√π vicino √® stato rilevato a {{attr.get('distance','0')}} km 
        a {{direction}} da casa. {% endif %}
    action:
      - service: *script
        data:
          call_no_annuncio: 1
          title: >-
            Burze ‚ÜØ {% if trigger.from_state is defined and trigger.from_state.state == 'off' %} 
            {{ trigger.to_state.attributes.friendly_name }}.
            {% else %} AGGIORNAMENTO TEMPORALE. {% endif %}
          message: >-
            {% set n = attr.get('number', 0) %} {% set d = attr.get('distance')|default(radius,'0') %}
            {% macro dist() %} {% if d <= 0.5 %}5{% elif 0.5 < d <= 1 %}4{% elif 1 < d <= 5 %}3
            {% elif 5 < d <= 10 %}2{% elif 10 < d <= 20 %}1{% else %}0{% endif -%} {% endmacro %}
            {{alert.get(dist()|int).color}} Negli ultimi {{attr.get('period', 0)}} minuti
            {% for x in n|string -%}{{num[x]|default(x) -}}{% endfor %}‚ö° {% if n != 1 %}
            scariche di fulmini {% else %} fulmine scaricato {% endif %} nel raggio di {{radius}} km. 
            La scarica pi√π vicina √® avvenuta a {{attr.get('distance', 0)}} km a {{direction}} da casa.
          alexa:
            message_tts: "{{burze_tts_msg}}"
            media_player: *media_player_alexa
          google:
            message_tts: "{{burze_tts_msg}}"
            media_player: *media_player_google
          file: >-
            {% if trigger.from_state is defined and trigger.from_state.state == 'off' 
            and is_state('input_boolean.natural_events_send_image', 'on') %}
            /config/www/hassiohelp/pkg_natural_events/burze.png{% else %}{% endif %}

  #----------------------------------------------------------------------------------------------------#
  # D. PROTEZIONE CIVILE - Notifica criticit√† meteo-idro nella provincia impostata - Vedi tabella a fine package
  #----------------------------------------------------------------------------------------------------#
  - alias: natural_events_protezione_civile_notifications
    mode: queued
    max_exceeded: silent
    initial_state: true
    trigger:
      platform: state
      entity_id:
        - binary_sensor.dpc_idrogeologico_oggi
        - binary_sensor.dpc_idraulico_oggi
        - binary_sensor.dpc_temporali_oggi
        - binary_sensor.dpc_idrogeologico_domani
        - binary_sensor.dpc_idraulico_domani
        - binary_sensor.dpc_temporali_domani
    condition: >-
      {{ trigger.to_state.state == 'on' and (trigger.from_state.state == 'off' 
      or (trigger.to_state.attributes != trigger.from_state.attributes))}}
    action:
      - variables:
          bulletin: >-
            http://www.protezionecivile.gov.it/attivita-rischi/meteo-idro/attivita/previsione-prevenzione/centro-funzionale-centrale-rischio-meteo-idrogeologico/previsionale/bollettini-criticita/bollettino-odierno
          attr: "{{ trigger.to_state.attributes if trigger.to_state is defined else ({}) }}"
          alert: *alert
          dpc_tts_msg: >-
            Attenzione. {{attr.get('friendly_name', 'Test DPC')}}. Allerta {{attr.get('allerta', 'Bianca')}} {{attr.get('info', 'Nessuna info')}}.
      - service: *script
        data:
          call_no_annuncio: 1
          title: >-
            Protezione Civile - {{attr.get('rischio', 'Test DPC')}}
            {% if trigger.from_state is defined and trigger.from_state.state == 'on' %} - Revisione {% endif %}
          message: |
            {% set risk = {none: '‚ùå', 'Temporali':'‚ö°', 'Idraulico':'üíß', 'Idrogeologico':'üåä'} %}
            {{risk[attr.get('rischio')]}} {{attr.get('friendly_name', 'Test DPC')}}. 
            {{alert[attr.get('level', 0)].color}} Allerta {{attr.get('allerta' ,'Bianca')}} {{attr.get('info', 'No Info')}}.
          alexa:
            message_tts: "{{dpc_tts_msg}}"
            media_player: *media_player_alexa
            audio: soundbank://soundlibrary/weather/thunder/thunder_11
          google:
            message_tts: "{{dpc_tts_msg}}"
            media_player: *media_player_google
            audio: "https://d3qhmae9zx9eb.cloudfront.net/weather/thunder/thunder_11.mp3"
          link: >-
            [Bollettino di criticit√†]({{attr.get('link', bulletin)}})

  #----------------------------------------------------------------------------------------------------#
  # METEOALARM - Notifica criticit√† meteo nella regione impostata - Vedi tabella a fine package
  #----------------------------------------------------------------------------------------------------#
  - alias: natural_events_meteoalarm_notifications
    mode: queued
    initial_state: true
    trigger:
      platform: state
      entity_id: binary_sensor.meteoalarm
    condition: >-
      {{ trigger.to_state.state == 'on' and (trigger.from_state.state == 'off' 
      or trigger.to_state.attributes != trigger.from_state.attributes)}}
    variables:
      attr: "{{states.binary_sensor.meteoalarm.attributes if trigger.to_state is defined else ({}) }}"
      type_dict: *meteoalarm_type
      alert: *alert
      days: *days
      day: "{{as_timestamp(attr.get('onset', now()))|timestamp_custom('%w', true)|int}}"
      level: "{{attr.get('awareness_level')|regex_replace(find='(\\D)')|int}}" #|regex_replace(find="[^\d][^;]*")|int
      type: "{{attr.get('awareness_type')|regex_replace(find='(\\D)')|int}}" #|regex_replace(find="[^\d][^;]*")|int
      meteoalarm_tts_msg: >
        {{("oh no! ", "accipicchia! ", "accidenti! ", "attenzione! ", "come non detto! ") |random }}
        per {{days[day]}}, {{attr.get('headline','Test Intestazione')}}, {{attr.get('description', 'Test Descrizione')}}
    action:
      - service: *script
        data:
          call_no_annuncio: 1
          title: >-
            {{type_dict[type].icon}} MeteoAlarm - {% if trigger.from_state is defined and trigger.from_state.state == 'off' %}
            {{ attr.get('urgency')}}.{% else %}Revisione.{% endif %}
          message: |
            Per {{days[day]}}
            {{alert[level].color}} {{(type_dict[type].text)|upper}}. Allerta {{alert[level].text}}
            Descrizione: {{attr.get('description','Test Descrizione')}}
            {{as_timestamp(attr.get('effective'))|timestamp_custom('Valido dalle ore %H:%M del %d/%m')|default(now(),true)}}
            {{as_timestamp(attr.get('expires'))|timestamp_custom(' alle ore %H:%M del %d/%m')|default(now(),true)}}
          file: >-
            {% if is_state('input_boolean.natural_events_send_image', 'on') %}
            {{'/config/www/hassiohelp/pkg_natural_events/meteoalarm_{}.png'.format(type)}}{% else %}{% endif %}
          alexa:
            message_tts: "{{meteoalarm_tts_msg}}"
            media_player: *media_player_alexa
            audio: "{{type_dict[type].alexa_sound}}"
          google:
            message_tts: "{{meteoalarm_tts_msg}}"
            media_player: *media_player_google
            audio: "{{type_dict[type].google_sound}}"

  #----------------------------------------------------------------------------------------------------#
  # METEOALARM CUSTOM - Notifica criticit√† meteo nella regione impostata - Vedi tabella a fine package
  #----------------------------------------------------------------------------------------------------#
  - alias: natural_events_meteoalarm_custom_notifications
    mode: queued
    initial_state: true
    trigger:
      platform: state
      entity_id: sensor.meteoalarm_custom
    condition: "{{ not is_state('sensor.meteoalarm_custom', '0') }}"
    action:
      - variables:
          alert: *alert
          type_dict: *meteoalarm_type
          day: { "today": "Oggi", "tomorrow": "Domani" }
          level: { "White": 0, "Green": 1, "Yellow": 2, "Orange": 3, "Red": 4 }
          type_index:
            {
              "No-warnings": 0,
              "Wind": 1,
              "Snow/Ice": 2,
              "Thunderstorms": 3,
              "Fog": 4,
              "Extreme high temperature": 5,
              "Extreme low temperature": 6,
              "Coastal Event": 7,
              "Forestfire": 8,
              "Avalanches": 9,
              "Rain": 10,
              "Unavailable": 11,
              "Flood": 12,
              "Rain-Flood": 13,
            }
          meteoalarm_custom_tts_msg: >-
            {% set today = state_attr('sensor.meteoalarm_custom', 'today')|list %}
            {% set tomorrow = state_attr('sensor.meteoalarm_custom', 'tomorrow')|list %}
            ATTENZIONE.
            {% if today %}Per Oggi: 
              {% for risk in today -%}
                {{type_dict[type_index[risk['event']]].text}} con allerta {{alert[level[risk['code']]].text}}.
                {{-'' if 'Nessun Avviso' in risk['italiano'] else risk['italiano'] ~'.'}}
              {% endfor %}
            {% endif %}
            {% if tomorrow %}Per domani: 
              {% for risk in tomorrow -%}
                {{type_dict[type_index[risk['event']]].text}} con allerta {{alert[level[risk['code']]].text}}, 
                {{-'' if 'Nessun Avviso' in risk['italiano'] else risk['italiano'] ~'.'}}.
              {% endfor %}
            {% endif %}
      - service: *script
        data:
          call_no_annuncio: 1
          title: >-
            MeteoAlarm Custom
          message: |-
            {%- for s in ['today', 'tomorrow'] %}
            {%- set v = state_attr('sensor.meteoalarm_custom', s) %}
            {%- if v %}
            {{'‚Äó‚Äó‚Äó‚Äó‚Äó‚Äó‚Äó‚Äó‚Äó‚Äó‚Äó‚Äó‚Äó‚Äó‚Äó‚Äó‚Äó‚Äó‚Äó'}}
            {{day[s]|upper}}
            {{'¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø¬Ø'}}
            {%- for d in v %}
            {{alert[level[d['code']]].color + type_dict[type_index[d['event']]].icon + 
            type_dict[type_index[d['event']]].text}} allerta {{alert[level[d['code']]].text}}
            Descrizione: {{d['italiano']}}
            Data: {{d['start']|trim("CEST")|replace('.','/')}} - {{d['end']|trim("CEST")|replace('.','/')}}
            {%- endfor %}
            {%- endif %}
            {%- endfor %}
          alexa:
            message_tts: "{{meteoalarm_custom_tts_msg}}"
            media_player: *media_player_alexa
          google:
            message_tts: "{{meteoalarm_custom_tts_msg}}"
            media_player: *media_player_google

  #----------------------------------------------------------------------------------------------------#
  # GEO LOCATION - Notifica Terremoti
  #----------------------------------------------------------------------------------------------------#

  # INGV
  - alias: natural_events_quake_ingv_notifications
    mode: queued
    max_exceeded: silent
    initial_state: true
    trigger:
      - platform: geo_location
        source: "ingv_centro_nazionale_terremoti"
        zone: zone.geoalert
        event: enter
    condition: >-
      {{((as_timestamp(utcnow())-as_timestamp(trigger.to_state.attributes.publication_date))/3600*60)|int < 90 }}
    action:
      - variables:
          alert: *alert
          download_dir: *download_dir
          image_url: >-
            {{trigger.to_state.attributes.image_url|default}}
          level: >-
            {% set m = trigger.to_state.attributes.magnitude %}
            {% macro magnitude() %}
            {%if 0<=m<=1.9%}0{%elif 2<=m<=2.9%}1{%elif 3<=m<=3.9%}2{%elif 4<=m<=5.9%}3{%else%}4{%endif%}
            {% endmacro %} {{alert.get(magnitude()|int).color}}
          quake_tts_msg: >-
            Rilevato terremoto a {{trigger.to_state.state}} km,
            di magnitudo {{trigger.to_state.attributes.magnitude}},
            con epicentro {{trigger.to_state.attributes.region}}.
          # image_url: >- ## Manual setting
          #   {% set eventid = trigger.to_state.attributes.event_id %}
          #   {{'http://shakemap.rm.ingv.it/shake4/data/{}/current/products/intensity.jpg'.format(eventid) 
          #   if trigger.to_state.attributes.magnitude >= 3 }}

      # NOTIFICA WITHOUT IMAGE
      - service: *script
        data:
          call_no_annuncio: 1
          title: >-
            üöß{{level}} INGV.
          message: |
            Rilevato terremoto a una distanza di {{trigger.to_state.state}} Km da casa.
            Magnitudo: {{trigger.to_state.attributes.magnitude}} 
            Epicentro: {{trigger.to_state.attributes.region}}

            {% set state_dict = {'home': 'casa', 'not_home': 'fuori casa'} %}
            {%- for person in expand(states.person) -%}
              {% set distanza = distance(trigger.to_state.attributes.latitude, trigger.to_state.attributes.longitude, person.entity_id) 
              if person.latitude is defined else trigger.to_state.state -%}
            {{"üìç{} ({}) a circa {} km dall'epicentro.".format(person.name|upper, state_dict.get(person.state, person.state), distanza) }}
            {% endfor %}
            [Dati Evento](http://terremoti.ingv.it/event/{{trigger.to_state.attributes.event_id}})
          alexa:
            message_tts: "{{quake_tts_msg}}"
            media_player: *media_player_alexa
            audio: <audio src="soundbank://soundlibrary/nature/amzn_sfx_earthquake_rumble_02"/>
          google:
            message_tts: "{{quake_tts_msg}}"
            media_player: *media_player_google
            audio: "https://d3qhmae9zx9eb.cloudfront.net/nature/amzn_sfx_earthquake_rumble_02.mp3"
      # IF IMAGE URLs IS NOT NONE TRY DOWNLOAD IMAGE FOR xx TIME
      - choose:
          - conditions: "{{ image_url|length > 0 }}" #{{trigger.to_state.attributes.magnitude >= 3}}" # "{{trigger.to_state.attributes.image_url is defined}}"
            sequence:
              - repeat:
                  sequence:
                    - service: hassio.addon_stdin
                      data:
                        addon: a0d7b954_ssh
                        input: >-
                          rm -f "{{download_dir}}lastquake.jpg";
                          wget --spider "{{image_url}}" &&
                          curl -Lk -f -m 5 "{{image_url}}" --create-dirs -o "{{download_dir}}lastquake.jpg" &&
                          hass-cli state edit binary_sensor.check_url "on" ||
                          hass-cli state edit binary_sensor.check_url "off"
                    - wait_for_trigger:
                        - platform: state
                          entity_id: binary_sensor.check_url
                          to: "on"
                      timeout: "00:00:20"
                  until: "{{ is_state('binary_sensor.check_url', 'on') or repeat.index >= 15 }}"
              - choose:
                  - conditions: >
                      {{ image_url|length > 0 and is_state('binary_sensor.check_url', 'on') }}
                    sequence:
                      - service: *script
                        data:
                          call_no_annuncio: true
                          title: "‚úÖ{{level}} INGV."
                          message: |
                            {% set data_utc = trigger.to_state.attributes.publication_date %}
                            {{as_timestamp(data_utc)|timestamp_custom ('Data %d/%m/%Y Ore %H:%M:%S')}}
                            Magnitudo: {{trigger.to_state.attributes.magnitude}} 
                            Epicentro: {{trigger.to_state.attributes.region}} 
                          url: "{{ image_url }}"
      # ALL IN ONE
      # - delay: "00:00:01"
      # - service: *script
      #   data:
      #     call_no_annuncio: 1
      #     title: >-
      #       üöß{{level}} TEST.
      #     message: |
      #       {% set data_utc = trigger.to_state.attributes.publication_date %}
      #       Rilevato terremoto di magnitudo: {{trigger.to_state.attributes.magnitude}} 
      #       a una distanza di {{trigger.to_state.state}} Km da casa. Epicentro: {{trigger.to_state.attributes.region}} 
      #       {{as_timestamp(data_utc)|timestamp_custom ('Data %d/%m/%Y Ore %H:%M:%S')}}

      #       {% set state_dict = {'home': 'casa', 'not_home': 'fuori casa'} %}
      #       {%- for person in expand(states.person) -%}
      #       {% set distanza = distance(trigger.to_state.attributes.latitude, trigger.to_state.attributes.longitude, person.entity_id) 
      #           if person.latitude is defined else trigger.to_state.state -%}
      #       {{"üìç{} ({}) a circa {} km dall'epicentro.".format(person.name|upper, state_dict.get(person.state, person.state), distanza) }}
      #       {% endfor %}
      #       [Dati Evento](http://terremoti.ingv.it/event/{{trigger.to_state.attributes.event_id}})
      #     url: "{{image_url if image_url|length > 0 and is_state('binary_sensor.check_url', 'on')}}"
          # alexa:
          #   message_tts: "{{quake_tts_msg}}"
          #   media_player: *media_player_alexa
          #   audio: <audio src="soundbank://soundlibrary/nature/amzn_sfx_earthquake_rumble_02"/>
          # google:
          #   message_tts: "{{quake_tts_msg}}"
          #   media_player: *media_player_google
          #   audio: "https://d3qhmae9zx9eb.cloudfront.net/nature/amzn_sfx_earthquake_rumble_02.mp3"

  # USGS
  - alias: natural_events_quake_usgs_notifications
    mode: queued
    max_exceeded: silent
    initial_state: true
    trigger:
      - platform: geo_location
        source: usgs_earthquakes_feed
        zone: zone.geoalert
        event: enter
    condition: >
      {{((as_timestamp(utcnow())-as_timestamp(trigger.to_state.attributes.time))/3600*60)|int < 60}}
    action:
      - variables:
          usgs_tts_msg: >-
            Evento sismico a {{trigger.to_state.state}} km.
            Epicentro {{trigger.to_state.attributes.place}}.
            Magnitudo {{trigger.to_state.attributes.magnitude}}.
      - service: *script
        data:
          call_no_annuncio: 1
          title: >-
            üöß USGS - Evento sismico. {{trigger.to_state.attributes.status}}
          message: >-
            {% set data_utc = trigger.to_state.attributes.time %}
            Evento sismico di magnitudo: {{trigger.to_state.attributes.magnitude}} 
            a una distanza di {{ trigger.to_state.state }} Km da casa. 
            Epicentro: {{trigger.to_state.attributes.place}}
            {{as_timestamp(data_utc)|timestamp_custom ('Data %d/%m/%Y Ore %H:%M:%S')}}
          link: >-
            [LINK MAPPE](https://earthquake.usgs.gov/earthquakes/eventpage/{{trigger.to_state.attributes.external_id}}/executive)
          alexa:
            message_tts: "{{usgs_tts_msg}}"
            media_player: *media_player_alexa
            audio: soundbank://soundlibrary/backgrounds_ambience/volcano_earthquake/volcano_earthquake_03
            wait_time: 4
          google:
            message_tts: "{{usgs_tts_msg}}"
            media_player: *media_player_google
            audio: "https://d3qhmae9zx9eb.cloudfront.net/backgrounds_ambience/volcano_earthquake/volcano_earthquake_03.mp3"

  #----------------------------------------------------------------------------------------------------#
  # GEO LOCATION - Notifica GDACS # Global Disaster Alert and Coordination System
  #----------------------------------------------------------------------------------------------------#
  - alias: natural_events_gdacs_notifications
    mode: queued
    max_exceeded: silent
    initial_state: true
    trigger:
      - platform: geo_location
        source: "gdacs"
        zone: zone.geoalert
        event: enter
    condition: >
      {{as_timestamp(trigger.to_state.attributes.to_date) > as_timestamp(utcnow()) 
        or trigger.to_state.attributes.alert_level != 'Green'}}
    action:
      - variables:
          from_data: "{{trigger.to_state.attributes.from_date}}"
          to_data: "{{trigger.to_state.attributes.to_date}}"
          event_type: "{{trigger.to_state.attributes.event_type}}"
          event:
            Earthquake: "Terremoto"
            Tropical Cyclone: "Ciclone tropicale" #TODO
            Flood: "Inondazione"
            Volcano: "Vulcano"
            Drought: "Siccit√†"
          gdacs_tts_msg: >-
            Avviso di disastro globale: {{event.get(event_type, event_type)}}
      - service: *script
        data:
          call_no_annuncio: 1
          title: >-
            GDACS: {{event.get(event_type, event_type)}}
          message: |-
            Avviso di disastro globale: {{event.get(event_type, event_type)}}
            Descrizione: {{trigger.to_state.attributes.description}}
            Rilasciato: {{'-' if not from_date else as_timestamp(from_date)|timestamp_custom("%d.%m.%Y %H:%M")}}
            Fine: {{'-' if not to_date else as_timestamp(to_date)|timestamp_custom("%d.%m.%Y %H:%M")}}
          alexa:
            message_tts: "{{gdacs_tts_msg}}"
            media_player: *media_player_alexa
          google:
            message_tts: "{{gdacs_tts_msg}}"
            media_player: *media_player_google
#######################################-#######################################
##                                  SCRIPT
#######################################-#######################################
script:
  natural_events_notifications:
    alias: Notifiche Geo Meteo Alert
    mode: queued
    max_exceeded: silent
    sequence:
      - variables:
          is_not: [false,null,'','none']
          notify: *notify
          alexa_default: *media_player_alexa
          google_default: *media_player_google
          notify_service: "{{'' if '.' in notify else 'notify.'}}{{notify|replace(' ','_')}}"
          message: "{{ message|default('')  + '\n{}'.format(link if link is defined else '') }}"
          alexa_message: > 
            {% if alexa is boolean %}
            {{ message if alexa }}
            {% elif alexa is defined and alexa is iterable %}
            {{ (alexa['message_tts'] if 'message_tts' in alexa else alexa['message'] if 'message' in alexa)|default(message) }}
            {% endif %}
          google_message: >
            {% if google is boolean %}
            {{ message|default if google }}
            {% elif google is defined and google is iterable and not '' in google %}
            {{ google['message_tts'] if 'message_tts' in google else google['message'] if 'message' in google }}
            {% endif %}
      - alias: NOTIFY IMAGE 
        choose:
          - alias: IF URL OR FILE AND TEXT
            conditions:
              - "{{(file|length > 1 or url|length > 1) and notify|length > 1 }}"
            sequence:
              - service: "{{notify_service}}"
                data:
                  title: "{{title|default}}"
                  message: "{{message}}"
                  data:
                    photo:
                      - "{{'url' if url is defined else 'file'}}": "{{url if url is defined else file}}"
                        caption: |
                          {{title|default}}
                          {{message}}
      - alias: NOTIFY MESSAGE
        choose:
          - alias: IF MESSAGGE
            conditions: 
              - "{{message|length > 0 and notify|length > 1}}"
            sequence:
              - service: "{{notify_service}}"
                data:
                  title: "{{title|default}}"
                  message: "{{message}}"
      - alias: TTS MESSAGE
        choose:
          - alias: IF TIME AND AUDIO
            conditions:
              - condition: time
                after: *speaker_on_dnd_end
                before: *speaker_off_dnd_start
              - "{{ (alexa_default not in is_not and alexa not in is_not) or
                    (google_default not in is_not and google not in is_not)}}"
              # - "{{expand(states.person)|selectattr('state','eq','home')|list|count > 0}}"
            sequence:
              - alias: TTS ALEXA
                choose:
                  - alias: IF ALEXA
                    conditions: "{{ alexa_default not in is_not and alexa_message|length > 0 }}"
                    sequence:
                      - variables:
                          alexa_sound: "{{alexa['audio']|default }}"
                          alexa_sound_tag: >
                            {% if not '<audio src=' in alexa_sound and alexa_sound %}
                            {{'<audio src="'+alexa_sound+'"/>'}}
                            {% else %}{{alexa_sound}}{% endif %}
                          alexa_players: >
                            {{ alexa['media_player'] if alexa['media_player'] is defined else alexa_default }}
                          # alexa_players: > 
                          #   {% set entity = alexa['media_player'] if alexa['media_player'] is defined else galexa_default %}
                          #   {{expand((entity|regex_replace(find="\s+", replace="")).rsplit(",") 
                          #   if entity is string else entity)|map(attribute='entity_id')|list}}
                          message_tts: >-
                            {{ alexa_message|regex_replace(find="\s+|_", replace=" ")|regex_replace(find="http\S+", replace="") }}
                      - service: notify.alexa_media
                        data:
                          target: "{{alexa_players}}"
                          message: "{{alexa_sound_tag + message_tts}}"
                          data:
                            type: tts
              - alias: TTS GOOGLE
                choose:
                  - alias: IF GOOGLE
                    conditions: "{{ google_default not in is_not and google_message|length > 0 }}"
                    sequence:
                      - variables:
                          google_sound: "{{google['audio']|default }}"
                          google_players: > 
                            {% set entity = google['media_player'] if google['media_player'] is defined else google_default %}
                            {{expand((entity|regex_replace(find="\s+", replace="")).rsplit(",") 
                            if entity is string else entity)|map(attribute='entity_id')|list}}
                          message_tts: >-
                            {{ google_message|regex_replace(find="\s+|_", replace=" ")|regex_replace(find="http\S+", replace="") }}
                      - alias: ADD SOUND TTS GOOGLE
                        choose:
                          - alias: IF GOOGLE SOUND
                            conditions: "{{google_sound|length > 1 }}"
                            sequence:
                              - service: media_player.play_media
                                data:
                                  entity_id: "{{google_players}}"
                                  media_content_id: "{{google_sound}}"
                                  media_content_type: music
                              - delay: "00:00:01"
                              - delay: 
                                  seconds: >
                                    {{expand(google_players)|selectattr('attributes.media_duration','defined')
                                    |map(attribute='attributes.media_duration')|list|first|default(7)|float}}
                      - service: tts.google_translate_say
                        data:
                          entity_id: "{{google_players}}"
                          message: "{{message_tts}}"
                      # - delay: "00:00:01"
                      # - delay: 
                      #     seconds: >
                      #       {{expand(google_players)|selectattr('attributes.media_duration','defined')
                      #       |map(attribute='attributes.media_duration')|list|first|default(0)|float}}
              - delay:
                  seconds: &delay >-
                    {{ (alexa_message|wordcount, google_message|wordcount)
                        |max|default(message|wordcount, true) // 2
                        +(2 if alexa is boolean or not 'audio' in alexa|default else 9) }}

#######################################-#######################################
##                                  LEGEND
#######################################-#######################################
### METEOALARM
#### Awareness Types
# | Code | Type                      |
# |------|---------------------------|
# | 0    | No Warnings               | Nessun Avviso
# | 1    | Wind                      | Vento
# | 2    | Snow-Ice                  | Neve-Ghiaccio
# | 3    | Thunderstorm              | Temporali
# | 4    | Fog                       | Nebbia
# | 5    | Extreme High Temperatures | Temperature massime estreme
# | 6    | Extreme Low Temperatures  | Temperature minime estreme
# | 7    | Costal Event              | Eventi Costieri
# | 8    | Forest Fire               | Incendi bischivi
# | 9    | Avalanche                 | Valanghe
# | 10   | Rain                      | Pioggia
# | 11   | Unavailable               | Non disponibile
# | 12   | Flooding                  | Alluvione
# | 13   | Rain-Flooding             | Pioggia-Alluvione

#### Awareness Levels
# | Code | Level             |
# |------|-------------------|-------------------|
# | 0    | White/Unknown     | Bianco/Sconosciuto
# | 1    | Green/No Warnings | Verde/Nessun Avviso
# | 2    | Yellow            | Giallo
# | 3    | Orange            | Arancione
# | 4    | Red               | Rosso

## DIPARTIMENTO PROTEZIONE CIVILE LEGEND
# | Code | Level             | Criticit√†
# |------|-------------------|-------------------|
# | 0    | BIANCA            | Non disponibile
# | 1    | VERDE             | Nessun Avviso
# | 2    | GIALLA            | Ordinaria
# | 3    | ARANCIONE         | Moderata
# | 4    | ROSSA             | Elevata
#######################################-#######################################
##                                END PACKAGE
#######################################-#######################################


########################
### EXAMPLE SECRETS FILE
########################

# pkg_natural_events_script: script.natural_events_notifications
# pkg_natural_events_notify: telegram
# pkg_natural_events_google: media_player.black_due,media_player.red
# pkg_natural_events_alexa: media_player.studio,media_player.sala

# ## Do Not Disturb TTS (Per script.natural_events_notifications)
# pkg_natural_events_dnd_start: 23:00
# pkg_natural_events_dnd_end: 07:00

# ## Cartella per downloads [Se la cambi, ricorda di farlo anche in lovelace!]
# pkg_natural_events_download_dir: "/config/www/hassiohelp/downloads/"

# pkg_natural_events_radius_meteoalert: 25000 # Metri
# pkg_natural_events_radius_geoalert: 1000000 # Metri
# pkg_natural_events_radius_quake: 1000 # Km
# pkg_natural_events_magnitude: 3.0
# pkg_natural_events_radius_burze: 25 # Km
# pkg_natural_events_latitude_home: 41.9109
# pkg_natural_events_longitude_home: 12.4818
# pkg_natural_events_meteoalarm_regione: Lazio
# pkg_natural_events_meteoalarm_custom_id: IT012-Lazio
# pkg_natural_events_istat: "058091"
# pkg_natural_events_burze_api_key: x123456789012xx12xxx12aa345bb6c67890d12e

################################################
### EXAMPLE SECRETS FILE WITH TEMPLATE...
################################################
# pkg_natural_events_script: "{{states('input_select.centro_notifiche')}}" #script.my_notify #script.natural_events_notifications
# pkg_natural_events_notify: "{{states('input_select.text_notify')|lower}}" #telegram
# pkg_natural_events_google: "{{states('sensor.media_player_google')}}" #media_player.black_due
# pkg_natural_events_alexa: "" # null

# ## Do Not Disturb TTS (Per script.natural_events_notifications)
# pkg_natural_events_dnd_start: "input_datetime.dnd_start_weekdays" # 23:00
# pkg_natural_events_dnd_end: "input_datetime.dnd_end_weekdays" # 07:00

# ## Cartella per downloads [Se la cambi, ricorda di farlo anche in lovelace!]
# pkg_natural_events_download_dir: "/config/www/hassiohelp/downloads/"

# pkg_natural_events_radius_meteoalert: 25000 # Metri
# pkg_natural_events_radius_geoalert: 1000000 # Metri
# pkg_natural_events_radius_quake: 1000 # Km
# pkg_natural_events_magnitude: 2.0
# pkg_natural_events_radius_burze: 25 # Km
# pkg_natural_events_latitude_home: 41.9109
# pkg_natural_events_longitude_home: 12.4818
# pkg_natural_events_meteoalarm_regione: Lazio
# pkg_natural_events_meteoalarm_custom_id: IT012-Lazio
# pkg_natural_events_istat: "058091"
# pkg_natural_events_burze_api_key: x123456789012xx12xxx12aa345bb6c67890d12e
